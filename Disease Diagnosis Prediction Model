{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "N0V4-RmREoIt"
   },
   "source": [
    "# Project4 \n",
    "\n",
    "Team member: Dengyi Liu, Xin Xiang, Yuchen Wang"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The goal of this project is using diagnose information to predict the result of diagnose. In this project, we have done EDA, data preperation, feature engineering, data split, model training and result analyse."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Dfw7kVtWK6CC"
   },
   "source": [
    "## Import necessary libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "D16dFNKfE7I2"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "id": "H-cEnHsOE_n8"
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "import statsmodels.stats.api as sms\n",
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "import statsmodels.api as sm\n",
    "from statsmodels.tools.tools import add_constant\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "from sklearn.metrics import (\n",
    "    f1_score,\n",
    "    accuracy_score,\n",
    "    recall_score,\n",
    "    precision_score,\n",
    "    confusion_matrix,\n",
    "    make_scorer,\n",
    "    roc_auc_score,\n",
    "    roc_curve,\n",
    "    precision_recall_curve,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "zyqcUSWnK_6j"
   },
   "source": [
    "## Import dataset from Github"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 206
    },
    "id": "CIh_wGYIFLDJ",
    "outputId": "a2403709-fc23-4c9a-8ebb-bf69dc328c39"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Diagnosis</th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>PainType</th>\n",
       "      <th>BloodPres</th>\n",
       "      <th>Chol</th>\n",
       "      <th>FBSugar</th>\n",
       "      <th>RestECG</th>\n",
       "      <th>MaxHeartRate</th>\n",
       "      <th>ExAngina</th>\n",
       "      <th>STPeakSlope</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>63</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>145</td>\n",
       "      <td>233</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>150</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>67</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>160</td>\n",
       "      <td>286</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>108</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>67</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>120</td>\n",
       "      <td>229</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>129</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>37</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>130</td>\n",
       "      <td>250</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>187</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>130</td>\n",
       "      <td>204</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>172</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Diagnosis  Age  Gender  PainType  BloodPres  Chol  FBSugar  RestECG  \\\n",
       "0          0   63       1         1        145   233        1        2   \n",
       "1          2   67       1         4        160   286        0        2   \n",
       "2          1   67       1         4        120   229        0        2   \n",
       "3          0   37       1         3        130   250        0        0   \n",
       "4          0   41       0         2        130   204        0        2   \n",
       "\n",
       "   MaxHeartRate  ExAngina  STPeakSlope  \n",
       "0           150         0            3  \n",
       "1           108         1            2  \n",
       "2           129         1            2  \n",
       "3           187         0            3  \n",
       "4           172         0            1  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\n",
    "    \"https://raw.githubusercontent.com/ycwang15/Analytics_Programming/Data/Project%204%20DATA.csv\"\n",
    ")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "_1i_TRPVFzpv"
   },
   "source": [
    "## Data Overview"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "WbuxptxKF5Tt",
    "outputId": "eb757fb9-5ed3-452d-acdc-91e7d0b5ecbf"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(303, 11)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "vpNjblEAFfZP",
    "outputId": "c3c8bf62-9ba4-40a1-b6a4-251c3eb41cc5"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 303 entries, 0 to 302\n",
      "Data columns (total 11 columns):\n",
      " #   Column        Non-Null Count  Dtype\n",
      "---  ------        --------------  -----\n",
      " 0   Diagnosis     303 non-null    int64\n",
      " 1   Age           303 non-null    int64\n",
      " 2   Gender        303 non-null    int64\n",
      " 3   PainType      303 non-null    int64\n",
      " 4   BloodPres     303 non-null    int64\n",
      " 5   Chol          303 non-null    int64\n",
      " 6   FBSugar       303 non-null    int64\n",
      " 7   RestECG       303 non-null    int64\n",
      " 8   MaxHeartRate  303 non-null    int64\n",
      " 9   ExAngina      303 non-null    int64\n",
      " 10  STPeakSlope   303 non-null    int64\n",
      "dtypes: int64(11)\n",
      "memory usage: 26.2 KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 394
    },
    "id": "IK3CCyydF3rJ",
    "outputId": "93b71ff7-bed2-4ebc-f80b-9229bb89d6cf"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Diagnosis</th>\n",
       "      <td>303.0</td>\n",
       "      <td>0.937294</td>\n",
       "      <td>1.228536</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>303.0</td>\n",
       "      <td>54.438944</td>\n",
       "      <td>9.038662</td>\n",
       "      <td>29.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>77.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gender</th>\n",
       "      <td>303.0</td>\n",
       "      <td>0.679868</td>\n",
       "      <td>0.467299</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PainType</th>\n",
       "      <td>303.0</td>\n",
       "      <td>3.158416</td>\n",
       "      <td>0.960126</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BloodPres</th>\n",
       "      <td>303.0</td>\n",
       "      <td>131.689769</td>\n",
       "      <td>17.599748</td>\n",
       "      <td>94.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>200.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chol</th>\n",
       "      <td>303.0</td>\n",
       "      <td>246.693069</td>\n",
       "      <td>51.776918</td>\n",
       "      <td>126.0</td>\n",
       "      <td>211.0</td>\n",
       "      <td>241.0</td>\n",
       "      <td>275.0</td>\n",
       "      <td>564.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FBSugar</th>\n",
       "      <td>303.0</td>\n",
       "      <td>0.148515</td>\n",
       "      <td>0.356198</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RestECG</th>\n",
       "      <td>303.0</td>\n",
       "      <td>0.990099</td>\n",
       "      <td>0.994971</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MaxHeartRate</th>\n",
       "      <td>303.0</td>\n",
       "      <td>149.607261</td>\n",
       "      <td>22.875003</td>\n",
       "      <td>71.0</td>\n",
       "      <td>133.5</td>\n",
       "      <td>153.0</td>\n",
       "      <td>166.0</td>\n",
       "      <td>202.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ExAngina</th>\n",
       "      <td>303.0</td>\n",
       "      <td>0.326733</td>\n",
       "      <td>0.469794</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>STPeakSlope</th>\n",
       "      <td>303.0</td>\n",
       "      <td>1.600660</td>\n",
       "      <td>0.616226</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              count        mean        std    min    25%    50%    75%    max\n",
       "Diagnosis     303.0    0.937294   1.228536    0.0    0.0    0.0    2.0    4.0\n",
       "Age           303.0   54.438944   9.038662   29.0   48.0   56.0   61.0   77.0\n",
       "Gender        303.0    0.679868   0.467299    0.0    0.0    1.0    1.0    1.0\n",
       "PainType      303.0    3.158416   0.960126    1.0    3.0    3.0    4.0    4.0\n",
       "BloodPres     303.0  131.689769  17.599748   94.0  120.0  130.0  140.0  200.0\n",
       "Chol          303.0  246.693069  51.776918  126.0  211.0  241.0  275.0  564.0\n",
       "FBSugar       303.0    0.148515   0.356198    0.0    0.0    0.0    0.0    1.0\n",
       "RestECG       303.0    0.990099   0.994971    0.0    0.0    1.0    2.0    2.0\n",
       "MaxHeartRate  303.0  149.607261  22.875003   71.0  133.5  153.0  166.0  202.0\n",
       "ExAngina      303.0    0.326733   0.469794    0.0    0.0    0.0    1.0    1.0\n",
       "STPeakSlope   303.0    1.600660   0.616226    1.0    1.0    2.0    2.0    3.0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe().T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "u6hLYbFFF_Gz",
    "outputId": "453c814e-3ea1-4d72-c3fe-967780d4698f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Diagnosis       0\n",
       "Age             0\n",
       "Gender          0\n",
       "PainType        0\n",
       "BloodPres       0\n",
       "Chol            0\n",
       "FBSugar         0\n",
       "RestECG         0\n",
       "MaxHeartRate    0\n",
       "ExAngina        0\n",
       "STPeakSlope     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "o_68mmrOF_Qb",
    "outputId": "49745da6-9307-43f5-f234-9b3f693893b3"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "o-Rlh0KMGKJS"
   },
   "source": [
    "\n",
    "\n",
    "*   There are 303 rows and 11 columns in this dataset.\n",
    "*   No missing values and duplicated values here which is a good news.\n",
    "*   The data type of all of the columns are the \"int64\", we will convert some of them into appropriate type.\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "PpOjKzM_PRgT"
   },
   "source": [
    "## Feature Engineering"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "iwC6UJhVPYNr"
   },
   "source": [
    "* Convert certain columns from int to object.\n",
    "* Replace the number in PainType and STeakSlope with appropriate object.\n",
    "* Combine different number into one number, for example, both '1' and '2' in the column Diagnosis indicate the people has the heart disease, so we will replace 2 with 1, and the same situation in the column 'RestECG'."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "NkZE9b_0ZQZb"
   },
   "source": [
    "### Convert the column PainType and STPeakSlope from int64 to object, and then using appropriate string to replace the each number."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "id": "SRcZeoCcF_TB"
   },
   "outputs": [],
   "source": [
    "df[['PainType','STPeakSlope']] = df[['PainType','STPeakSlope']].astype(str) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "H03BsRlvQZFy",
    "outputId": "f7904450-4f40-496d-8a5f-5fbe8084dd67"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Typical Angina', 'asymptomatic', 'non\\x02anginal pain',\n",
       "       'atypical angina'], dtype=object)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['PainType'] = df['PainType'].replace(str(1),'Typical Angina')\n",
    "df['PainType'] = df['PainType'].replace(str(2),'atypical angina')\n",
    "df['PainType'] = df['PainType'].replace(str(3),'non\u0002anginal pain')\n",
    "df['PainType'] = df['PainType'].replace(str(4),'asymptomatic')\n",
    "df['PainType'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "gd-zSKVTQZKq",
    "outputId": "37be2f61-714d-448f-f84d-9c40ce465c00"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['downsloping', 'flat', 'upsloping'], dtype=object)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['STPeakSlope'] = df['STPeakSlope'].replace(str(1),'upsloping')\n",
    "df['STPeakSlope'] = df['STPeakSlope'].replace(str(2),'flat')\n",
    "df['STPeakSlope'] = df['STPeakSlope'].replace(str(3),'downsloping')\n",
    "df['STPeakSlope'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "I_Y_9PTiZgTw"
   },
   "source": [
    "### Check the unique number in the column RestECG and Diagnosis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Pzc97lc2F_dr",
    "outputId": "dbeb43cb-624c-4512-bdab-b0b020b95efc"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    151\n",
       "2    148\n",
       "1      4\n",
       "Name: RestECG, dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['RestECG'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "u13XiUgKF_gU",
    "outputId": "898917c7-e6a0-4972-c4bd-285580e8217a"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    164\n",
       "1     55\n",
       "2     36\n",
       "3     35\n",
       "4     13\n",
       "Name: Diagnosis, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Diagnosis'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "CmgsaeS9bS7c"
   },
   "source": [
    "### Change all numbers that greater than 1 into 1 in Diagnosis and RestECG column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 206
    },
    "id": "EDCq6Ad6F_io",
    "outputId": "7e985340-7485-43e9-e845-9f7671336f89"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Diagnosis</th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>PainType</th>\n",
       "      <th>BloodPres</th>\n",
       "      <th>Chol</th>\n",
       "      <th>FBSugar</th>\n",
       "      <th>RestECG</th>\n",
       "      <th>MaxHeartRate</th>\n",
       "      <th>ExAngina</th>\n",
       "      <th>STPeakSlope</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>63</td>\n",
       "      <td>1</td>\n",
       "      <td>Typical Angina</td>\n",
       "      <td>145</td>\n",
       "      <td>233</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>150</td>\n",
       "      <td>0</td>\n",
       "      <td>downsloping</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>67</td>\n",
       "      <td>1</td>\n",
       "      <td>asymptomatic</td>\n",
       "      <td>160</td>\n",
       "      <td>286</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>108</td>\n",
       "      <td>1</td>\n",
       "      <td>flat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>67</td>\n",
       "      <td>1</td>\n",
       "      <td>asymptomatic</td>\n",
       "      <td>120</td>\n",
       "      <td>229</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>129</td>\n",
       "      <td>1</td>\n",
       "      <td>flat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>37</td>\n",
       "      <td>1</td>\n",
       "      <td>non\u0002anginal pain</td>\n",
       "      <td>130</td>\n",
       "      <td>250</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>187</td>\n",
       "      <td>0</td>\n",
       "      <td>downsloping</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "      <td>atypical angina</td>\n",
       "      <td>130</td>\n",
       "      <td>204</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>172</td>\n",
       "      <td>0</td>\n",
       "      <td>upsloping</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Diagnosis  Age  Gender          PainType  BloodPres  Chol  FBSugar  \\\n",
       "0          0   63       1    Typical Angina        145   233        1   \n",
       "1          1   67       1      asymptomatic        160   286        0   \n",
       "2          1   67       1      asymptomatic        120   229        0   \n",
       "3          0   37       1  non\u0002anginal pain        130   250        0   \n",
       "4          0   41       0   atypical angina        130   204        0   \n",
       "\n",
       "   RestECG  MaxHeartRate  ExAngina  STPeakSlope  \n",
       "0        1           150         0  downsloping  \n",
       "1        1           108         1         flat  \n",
       "2        1           129         1         flat  \n",
       "3        0           187         0  downsloping  \n",
       "4        1           172         0    upsloping  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['RestECG'] = df['RestECG'].replace(2,1)\n",
    "df = df.replace({'Diagnosis' : { 2 : 1, 3 : 1, 4 : 1 }})\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Mchqlj2mdCbc"
   },
   "source": [
    "## EDA "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "WyjuAg5JlNvq"
   },
   "source": [
    "### 1.Univariate Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "QsfJcfOQk58m"
   },
   "source": [
    "#### 1.1 Check the count plot for each categorical column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "qe_DypExek1y",
    "outputId": "09cd38c3-08c9-46ab-bcc3-38a2665433b8"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Diagnosis',\n",
       " 'Gender',\n",
       " 'PainType',\n",
       " 'FBSugar',\n",
       " 'RestECG',\n",
       " 'ExAngina',\n",
       " 'STPeakSlope']"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cat_col = df[['Diagnosis','Gender','PainType','FBSugar','RestECG','ExAngina','STPeakSlope']].columns.to_list()\n",
    "cat_col"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "id": "rtqGldtpfqPp",
    "outputId": "20e7c845-4e35-4ea6-a357-d87804654f17"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/yuchenwang/opt/anaconda3/lib/python3.9/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n",
      "/Users/yuchenwang/opt/anaconda3/lib/python3.9/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n",
      "/Users/yuchenwang/opt/anaconda3/lib/python3.9/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n",
      "/Users/yuchenwang/opt/anaconda3/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py:240: RuntimeWarning: Glyph 2 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/yuchenwang/opt/anaconda3/lib/python3.9/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n",
      "/Users/yuchenwang/opt/anaconda3/lib/python3.9/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n",
      "/Users/yuchenwang/opt/anaconda3/lib/python3.9/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n",
      "/Users/yuchenwang/opt/anaconda3/lib/python3.9/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n",
      "/Users/yuchenwang/opt/anaconda3/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py:240: RuntimeWarning: Glyph 2 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/yuchenwang/opt/anaconda3/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py:203: RuntimeWarning: Glyph 2 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x864 with 7 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15, 12))\n",
    "for i, j in enumerate(cat_col):\n",
    "    plt.subplot(3, 3, i + 1)\n",
    "    sns.countplot(df[j])\n",
    "    plt.xticks(rotation=90)\n",
    "    plt.tight_layout()\n",
    "    plt.title(j)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "1yoa7UZ8dpdf",
    "outputId": "1311b55a-d369-460d-b853-87257b6d764d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    0.541254\n",
      "1    0.458746\n",
      "Name: Diagnosis, dtype: float64\n",
      "--------------------------------------------------\n",
      "1    0.679868\n",
      "0    0.320132\n",
      "Name: Gender, dtype: float64\n",
      "--------------------------------------------------\n",
      "asymptomatic        0.475248\n",
      "non\u0002anginal pain    0.283828\n",
      "atypical angina     0.165017\n",
      "Typical Angina      0.075908\n",
      "Name: PainType, dtype: float64\n",
      "--------------------------------------------------\n",
      "0    0.851485\n",
      "1    0.148515\n",
      "Name: FBSugar, dtype: float64\n",
      "--------------------------------------------------\n",
      "1    0.50165\n",
      "0    0.49835\n",
      "Name: RestECG, dtype: float64\n",
      "--------------------------------------------------\n",
      "0    0.673267\n",
      "1    0.326733\n",
      "Name: ExAngina, dtype: float64\n",
      "--------------------------------------------------\n",
      "upsloping      0.468647\n",
      "flat           0.462046\n",
      "downsloping    0.069307\n",
      "Name: STPeakSlope, dtype: float64\n",
      "--------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "for i in cat_col:\n",
    "    print(df[i].value_counts(normalize = True))\n",
    "    print(\"-\" * 50)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "EcBSa1M0dgrG"
   },
   "source": [
    "**Observations**\n",
    "* Over half of the people got the heart disease.\n",
    "* Nearly 70% of people in this dataset are male.\n",
    "* asymptomatic is the most common pain type which over47%, followed by non\u0002anginal pain.\n",
    "* And over 85% people fasting blood sugar > 120 mg/dl.\n",
    "* Half of Resting echocardiogram are normal and half are abnormal.\n",
    "* Over 2/3 of people induced angina present.\n",
    "* Upsloping and flat are the two most common slope of peak exercise which around 46%, and downsloping only has 6.9% of people."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "J74vt6t2k_th"
   },
   "source": [
    "#### 1.2 Check the histogram for each continuous column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "ByD2-LefkgYm",
    "outputId": "2d5e6479-51a3-4828-b3aa-46f07c488707"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Age', 'BloodPres', 'Chol', 'MaxHeartRate']"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "distribution_col = df[['Age','BloodPres','Chol','MaxHeartRate']].columns.to_list()\n",
    "distribution_col"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 873
    },
    "id": "kcIykak_lweJ",
    "outputId": "1e5d30de-a89f-489b-bbf8-e96194b5adbd"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x864 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15, 12))\n",
    "for i, j in enumerate(distribution_col):\n",
    "    plt.subplot(2, 2, i + 1)\n",
    "    sns.histplot(df[j],kde=True)\n",
    "    plt.xticks(rotation=90)\n",
    "    plt.tight_layout()\n",
    "    plt.title(j)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Fub75jr0or5H"
   },
   "source": [
    "**Observations**\n",
    "* Most people are around 55 years old. And the Age distribution is almost normal distribution.\n",
    "* Slight right skew of Blood pressure distribution, and most people's blood pressure are around 135.\n",
    "* Right skew of Chol, most data locate around 240.\n",
    "* Slight left skew of MaxHearRate, most data locate around 160."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "47IJm2zzrpQv"
   },
   "source": [
    "#### 1.3 Check Outlier for each continuous data type column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 873
    },
    "id": "fc6vxfzLl3zL",
    "outputId": "6b824d37-32c5-454b-b237-38e638766360"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x864 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15, 12))\n",
    "\n",
    "for i, j in enumerate(distribution_col):\n",
    "    plt.subplot(2, 2, i + 1)\n",
    "    plt.boxplot(df[j], whis=1.5)\n",
    "    plt.tight_layout()\n",
    "    plt.title(j)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "bkpnvu1ztd18"
   },
   "source": [
    "* There are several outliers in the BloodPress and MaxHeartRate column, but we are going to keep these outliers, because all of them are real data, and based on the histogram above, they are not the matter."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "IYcN3F2nvQnA"
   },
   "source": [
    "### 2.Bivariate Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "m2rrGauVwRsR"
   },
   "source": [
    "#### 2.1 Stack bar to show the relationship between Diagnosis and different categorical variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "id": "xySkv-4dsAS7"
   },
   "outputs": [],
   "source": [
    "def Mstack_bar(data,b,a):\n",
    "    sorter = data[a].value_counts().index[-1]\n",
    "    tabl = pd.crosstab(data[b],data[a], normalize='index').sort_values(\n",
    "       by=sorter,ascending=False)\n",
    "    tabl.plot(rot=0,kind=\"bar\", stacked=True,color=['steelblue', 'red'],figsize = (7,5))\n",
    "    plt.legend(\n",
    "        loc=\"lower left\", frameon=False,\n",
    "    )\n",
    "    plt.legend(loc=\"upper left\", bbox_to_anchor=(1, 1))\n",
    "    plt.figure(figsize=(10, 5))\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "id": "njqAnXzzuE0S",
    "outputId": "f845ec34-8c0d-483c-f311-8c5aa9e1d0de"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 504x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 720x360 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/yuchenwang/opt/anaconda3/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py:240: RuntimeWarning: Glyph 2 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/yuchenwang/opt/anaconda3/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py:203: RuntimeWarning: Glyph 2 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 720x360 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 504x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 720x360 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAdsAAAE9CAYAAABDZ8irAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/MnkTPAAAACXBIWXMAAAsTAAALEwEAmpwYAAARTElEQVR4nO3df6zldZ3f8debGVjcusq63EWdYRg04+osFeJM0Roa3W5bBo1LKjX8aGrEpRNSaalNkyWmsgmmaTbGuNmIkgkl6B9dailpQaelTVNqtuqGoaEIq7gTsDKwlKGutOpavMy7f9wzzd3rHe65M+fjvXfm8UhuZr7f7+ec876T3Dzne86531PdHQBgnNPWegAAONmJLQAMJrYAMJjYAsBgYgsAg4ktAAy2ea0e+Oyzz+7t27ev1cMDsA499NBDz3f33FrPMWtrFtvt27fnwIEDa/XwAKxDVfU/1nqGETyNDACDiS0ADCa2ADDYmr1mCwDTeOihh3558+bNtye5IOvzJPFIkkfn5+ev27Vr13PLLRBbANa1zZs33/7a1772LXNzc3962mmnrbtPzzly5EgdPnx457PPPnt7kt9Ybs16/B8CACx2wdzc3P9ej6FNktNOO63n5uZeyMKZ9/JrfobzAMDxOG29hvaoyXzHbOqKsa2qO6rquap69BjHq6p+r6oOVtUjVfW2E5gXANadu++++1Xbt2+/YNu2bRd87GMfe+1qbz/Na7Z3JvlMki8c4/hlSXZMvt6e5HOTPwFg5i79xJd3zfL+7v/4ex96uePz8/P56Ec/uu3+++//9hve8IafXHjhhW+54oorvr9r164fT/sYK57ZdvdXknzvZZZcnuQLveDrSc6qqtdNOwAArGcPPPDAXzjvvPP+786dO18888wz+/3vf//37r777rNWcx+zeM12S5KnFm0fmuwDgA3vqaeeOmPLli0vHt3eunXri08//fQZq7mPWfzqTy2zb9kXsqtqb5K9SbJt27YZPPQaq+W+dX7mel2/b+LU4GdhffCzMEQv8+9aVav6x57Fme2hJOcu2t6a5JnlFnb3vu7e3d275+ZOug91AOAktG3btj93Jnvo0KEzXv/61/9kNfcxi9jem+SDk3clvyPJC939JzO4XwBYc+9617t++J3vfOfMb33rW2f8+Mc/rnvuuec1V1xxxfdXcx8rPo1cVb+f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\n",
      "text/plain": [
       "<Figure size 504x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 720x360 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 504x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 720x360 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 720x360 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stack_col = df[['Gender','PainType','FBSugar','RestECG','ExAngina','STPeakSlope']].columns.to_list()\n",
    "for i in stack_col:\n",
    "    Mstack_bar(df,i,'Diagnosis')\n",
    "  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Observations**\n",
    "* Heart disease happened in a higher percentage among the male than the female.\n",
    "* If a person got asymptomatic, he/she has a higher chance to get the heart disease.\n",
    "* No matter whether a person's fast blooding greater than 120, they got the same percentage to get the heart disease.\n",
    "* Higher risk to get heart disease if Resting echocardiogram results is abnormal.\n",
    "* Greater risk of heart disease if exercise-induced angina is present.\n",
    "* Flat and down sloping slopes at the peak of exercise are more likely to have heart disease"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "I9dJHuZpwv2l"
   },
   "source": [
    "#### 2.2 Heatmap to show the correlation between different numerical variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "id": "eJaSjm21w5Au"
   },
   "outputs": [],
   "source": [
    "col = df.select_dtypes(include=np.number).columns.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 704
    },
    "id": "Ye-Tqi91wd6i",
    "outputId": "2cb561d3-7f31-4be8-ef06-6a158e69bd68"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x864 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15, 12))\n",
    "\n",
    "sns.heatmap(\n",
    "    df[col].corr(), annot=True, vmin=-1, vmax=1, fmt=\".2f\", cmap=\"coolwarm\"\n",
    ");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "D0l4F0D3yeTR"
   },
   "source": [
    "## Data Processing\n",
    "**After we did EDA before, we need to do the data processing more profoundly.**\n",
    "* We decided to choose all the columns except STPeakSlope column, this column has three different variables, but one of them: downsloping only has 6% overall, we don't want to overfit our model due to the sparse variable in this column, and due to the heart disease domain knowledge, this attribute is not as important as others in the dataset.\n",
    "* And in this section, we are going to prepare our data to fit the model, it include data split into train and test dataset etc,.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 206
    },
    "id": "cZdFyv8Cwd_P",
    "outputId": "9070b27f-3cbb-47f1-f9a9-944b0632f203"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Diagnosis</th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>PainType</th>\n",
       "      <th>BloodPres</th>\n",
       "      <th>Chol</th>\n",
       "      <th>FBSugar</th>\n",
       "      <th>RestECG</th>\n",
       "      <th>MaxHeartRate</th>\n",
       "      <th>ExAngina</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>63</td>\n",
       "      <td>1</td>\n",
       "      <td>Typical Angina</td>\n",
       "      <td>145</td>\n",
       "      <td>233</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>150</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>67</td>\n",
       "      <td>1</td>\n",
       "      <td>asymptomatic</td>\n",
       "      <td>160</td>\n",
       "      <td>286</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>108</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>67</td>\n",
       "      <td>1</td>\n",
       "      <td>asymptomatic</td>\n",
       "      <td>120</td>\n",
       "      <td>229</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>129</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>37</td>\n",
       "      <td>1</td>\n",
       "      <td>non\u0002anginal pain</td>\n",
       "      <td>130</td>\n",
       "      <td>250</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>187</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "      <td>atypical angina</td>\n",
       "      <td>130</td>\n",
       "      <td>204</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>172</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Diagnosis  Age  Gender          PainType  BloodPres  Chol  FBSugar  \\\n",
       "0          0   63       1    Typical Angina        145   233        1   \n",
       "1          1   67       1      asymptomatic        160   286        0   \n",
       "2          1   67       1      asymptomatic        120   229        0   \n",
       "3          0   37       1  non\u0002anginal pain        130   250        0   \n",
       "4          0   41       0   atypical angina        130   204        0   \n",
       "\n",
       "   RestECG  MaxHeartRate  ExAngina  \n",
       "0        1           150         0  \n",
       "1        1           108         1  \n",
       "2        1           129         1  \n",
       "3        0           187         0  \n",
       "4        1           172         0  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_final = df.iloc[:,0:10]\n",
    "df_final.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "XPJF937k0qXS"
   },
   "source": [
    "### Preparing data for modeling\n",
    "* Get dummy variable for categorical data.\n",
    "* We will split the train and test dataset with the ratio of 8:2, and we also want different values (0 or 1) in the target variable('Diagnosis) that has the same ratio in both the train and test dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 485
    },
    "id": "0xU4MjfBN69Z",
    "outputId": "de77519e-b196-4651-fbd8-9ad3891f5157"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Diagnosis</th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>BloodPres</th>\n",
       "      <th>Chol</th>\n",
       "      <th>FBSugar</th>\n",
       "      <th>RestECG</th>\n",
       "      <th>MaxHeartRate</th>\n",
       "      <th>ExAngina</th>\n",
       "      <th>PainType_asymptomatic</th>\n",
       "      <th>PainType_atypical angina</th>\n",
       "      <th>PainType_non\u0002anginal pain</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>63</td>\n",
       "      <td>1</td>\n",
       "      <td>145</td>\n",
       "      <td>233</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>150</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>67</td>\n",
       "      <td>1</td>\n",
       "      <td>160</td>\n",
       "      <td>286</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>108</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>67</td>\n",
       "      <td>1</td>\n",
       "      <td>120</td>\n",
       "      <td>229</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>129</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>37</td>\n",
       "      <td>1</td>\n",
       "      <td>130</td>\n",
       "      <td>250</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>187</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "      <td>130</td>\n",
       "      <td>204</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>172</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>1</td>\n",
       "      <td>45</td>\n",
       "      <td>1</td>\n",
       "      <td>110</td>\n",
       "      <td>264</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>132</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>1</td>\n",
       "      <td>68</td>\n",
       "      <td>1</td>\n",
       "      <td>144</td>\n",
       "      <td>193</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>141</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>1</td>\n",
       "      <td>57</td>\n",
       "      <td>1</td>\n",
       "      <td>130</td>\n",
       "      <td>131</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>115</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>301</th>\n",
       "      <td>1</td>\n",
       "      <td>57</td>\n",
       "      <td>0</td>\n",
       "      <td>130</td>\n",
       "      <td>236</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>174</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>302</th>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "      <td>1</td>\n",
       "      <td>138</td>\n",
       "      <td>175</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>173</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>303 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Diagnosis  Age  Gender  BloodPres  Chol  FBSugar  RestECG  MaxHeartRate  \\\n",
       "0            0   63       1        145   233        1        1           150   \n",
       "1            1   67       1        160   286        0        1           108   \n",
       "2            1   67       1        120   229        0        1           129   \n",
       "3            0   37       1        130   250        0        0           187   \n",
       "4            0   41       0        130   204        0        1           172   \n",
       "..         ...  ...     ...        ...   ...      ...      ...           ...   \n",
       "298          1   45       1        110   264        0        0           132   \n",
       "299          1   68       1        144   193        1        0           141   \n",
       "300          1   57       1        130   131        0        0           115   \n",
       "301          1   57       0        130   236        0        1           174   \n",
       "302          0   38       1        138   175        0        0           173   \n",
       "\n",
       "     ExAngina  PainType_asymptomatic  PainType_atypical angina  \\\n",
       "0           0                      0                         0   \n",
       "1           1                      1                         0   \n",
       "2           1                      1                         0   \n",
       "3           0                      0                         0   \n",
       "4           0                      0                         1   \n",
       "..        ...                    ...                       ...   \n",
       "298         0                      0                         0   \n",
       "299         0                      1                         0   \n",
       "300         1                      1                         0   \n",
       "301         0                      0                         1   \n",
       "302         0                      0                         0   \n",
       "\n",
       "     PainType_non\u0002anginal pain  \n",
       "0                            0  \n",
       "1                            0  \n",
       "2                            0  \n",
       "3                            1  \n",
       "4                            0  \n",
       "..                         ...  \n",
       "298                          0  \n",
       "299                          0  \n",
       "300                          0  \n",
       "301                          0  \n",
       "302                          1  \n",
       "\n",
       "[303 rows x 12 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final = pd.get_dummies(df_final, drop_first=True)\n",
    "final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "NHmxs7UTweBk",
    "outputId": "334e13b1-b1aa-435a-a5fa-5f312350427c"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/yuchenwang/opt/anaconda3/lib/python3.9/site-packages/statsmodels/tsa/tsatools.py:142: FutureWarning: In a future version of pandas all arguments of concat except for the argument 'objs' will be keyword-only\n",
      "  x = pd.concat(x[::order], 1)\n"
     ]
    }
   ],
   "source": [
    "X = final.drop([\"Diagnosis\"], axis=1)\n",
    "Y = final[\"Diagnosis\"]\n",
    "\n",
    "X = sm.add_constant(X)\n",
    "\n",
    "X = pd.get_dummies(X, drop_first=True)\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, Y, test_size=0.20, random_state=1\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "igAab7t8weD6",
    "outputId": "62dcf51c-edef-4bc3-8632-b2c50bfff176"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of Training set :  (242, 12)\n",
      "Shape of test set :  (61, 12)\n",
      "Percentage of classes in training set:\n",
      "0    0.53719\n",
      "1    0.46281\n",
      "Name: Diagnosis, dtype: float64\n",
      "Percentage of classes in test set:\n",
      "0    0.557377\n",
      "1    0.442623\n",
      "Name: Diagnosis, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(\"Shape of Training set : \", X_train.shape)\n",
    "print(\"Shape of test set : \", X_test.shape)\n",
    "print(\"Percentage of classes in training set:\")\n",
    "print(y_train.value_counts(normalize=True))\n",
    "print(\"Percentage of classes in test set:\")\n",
    "print(y_test.value_counts(normalize=True))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "B3cBR4KTq8YD"
   },
   "source": [
    "## Model building"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "T1Bcn0nKq8hJ",
    "outputId": "95612d47-a108-49c4-8d34-52a70ba7aa57"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:              Diagnosis   No. Observations:                  242\n",
      "Model:                          Logit   Df Residuals:                      230\n",
      "Method:                           MLE   Df Model:                           11\n",
      "Date:                Sat, 19 Nov 2022   Pseudo R-squ.:                  0.3893\n",
      "Time:                        23:13:52   Log-Likelihood:                -102.03\n",
      "converged:                       True   LL-Null:                       -167.07\n",
      "Covariance Type:            nonrobust   LLR p-value:                 1.667e-22\n",
      "=============================================================================================\n",
      "                                coef    std err          z      P>|z|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------------------\n",
      "const                        -1.2762      2.579     -0.495      0.621      -6.331       3.779\n",
      "Age                           0.0186      0.024      0.788      0.431      -0.028       0.065\n",
      "Gender                        1.8790      0.429      4.376      0.000       1.037       2.721\n",
      "BloodPres                     0.0124      0.010      1.218      0.223      -0.008       0.032\n",
      "Chol                          0.0043      0.003      1.256      0.209      -0.002       0.011\n",
      "FBSugar                       0.0340      0.506      0.067      0.946      -0.957       1.025\n",
      "RestECG                       0.5038      0.361      1.394      0.163      -0.204       1.212\n",
      "MaxHeartRate                 -0.0324      0.010     -3.219      0.001      -0.052      -0.013\n",
      "ExAngina                      0.9792      0.410      2.388      0.017       0.175       1.783\n",
      "PainType_asymptomatic         1.3270      0.646      2.054      0.040       0.061       2.593\n",
      "PainType_atypical angina     -1.2540      0.839     -1.495      0.135      -2.898       0.390\n",
      "PainType_non\u0002anginal pain    -0.3795      0.658     -0.577      0.564      -1.669       0.910\n",
      "=============================================================================================\n"
     ]
    }
   ],
   "source": [
    "logit = sm.Logit(y_train, X_train.astype(float))\n",
    "lg = logit.fit(disp=False)\n",
    "\n",
    "print(lg.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "nCGmJBRE1tOq"
   },
   "source": [
    "### Model evaluation criterion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "c_D0Yvsb1wdq"
   },
   "source": [
    "* Before building the model, we need to identify which value should be maximum."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "GRmbI2Rk19jD"
   },
   "source": [
    "### The model may make wrong predictions:\n",
    "* The model predicts that the people has heart disease, but in reality, the people doesn't have heart disease.\n",
    "* The model predicts that the people doesn't have heart disease, but in reality, the people have heart disease."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "zgqephCe30mL"
   },
   "source": [
    "### Which mistake is more important:\n",
    "* The second is more important.\n",
    "* If the mistake happens in the second situation, the people will die due to the wrong prediction, because they might not care about their bodies based on the forecast.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "kAVaxRXIRbdt"
   },
   "source": [
    "### How to reduce the losses?\n",
    "* Recall Score can be used to be a important criterion, greater the recall score higher the chance to reduce the wrong."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "4WnR6sa2RkGm"
   },
   "source": [
    "### Create functions to calculate different metrics- Accuracy, Recall and Precision and plot the confusion matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "id": "jww4bxMqweK8"
   },
   "outputs": [],
   "source": [
    "def model_performance_classification_statsmodels(\n",
    "    model, predictors, target, threshold=0.5\n",
    "):\n",
    "    pred_temp = model.predict(predictors) > threshold\n",
    "    pred = np.round(pred_temp)\n",
    "\n",
    "    acc = accuracy_score(target, pred)  \n",
    "    recall = recall_score(target, pred)  \n",
    "    precision = precision_score(target, pred)  \n",
    "    f1 = f1_score(target, pred)  \n",
    "\n",
    "    df_perf = pd.DataFrame(\n",
    "        {\"Accuracy\": acc, \"Recall\": recall, \"Precision\": precision, \"F1\": f1,},\n",
    "        index=[0],\n",
    "    )\n",
    "\n",
    "    return df_perf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "id": "iXN4Bep2weNS"
   },
   "outputs": [],
   "source": [
    "def confusion_matrix_statsmodels(model, predictors, target, threshold=0.5):\n",
    "\n",
    "    y_pred = model.predict(predictors) > threshold\n",
    "    cm = confusion_matrix(target, y_pred)\n",
    "    labels = np.asarray(\n",
    "        [\n",
    "            [\"{0:0.0f}\".format(item) + \"\\n{0:.2%}\".format(item / cm.flatten().sum())]\n",
    "            for item in cm.flatten()\n",
    "        ]\n",
    "    ).reshape(2, 2)\n",
    "\n",
    "    plt.figure(figsize=(6, 4))\n",
    "    sns.heatmap(cm, annot=labels, fmt=\"\")\n",
    "    plt.ylabel(\"True label\")\n",
    "    plt.xlabel(\"Predicted label\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 279
    },
    "id": "G0thOQygrQrL",
    "outputId": "cdb49b95-eac4-44fb-cff9-75311dae64c1"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "confusion_matrix_statsmodels(lg, X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 99
    },
    "id": "wwosYtYcrRF5",
    "outputId": "d98c9224-dadb-4913-c836-32aebd29717b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training performance:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>Recall</th>\n",
       "      <th>Precision</th>\n",
       "      <th>F1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.789256</td>\n",
       "      <td>0.75</td>\n",
       "      <td>0.785047</td>\n",
       "      <td>0.767123</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Accuracy  Recall  Precision        F1\n",
       "0  0.789256    0.75   0.785047  0.767123"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"Training performance:\")\n",
    "Logistic_raw = model_performance_classification_statsmodels(lg, X_train, y_train)\n",
    "Logistic_raw"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "xqZxMtN_r2cv"
   },
   "source": [
    "\n",
    "- The recall of the model is 0.75 and we will try to maximize it further\n",
    "\n",
    "- The variables used to build the model might contain multicollinearity, which will affect the p-values\n",
    "\n",
    "- We will have to remove multicollinearity from the data to get reliable coefficients and p-values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "O10jRUNzr9Lx"
   },
   "source": [
    "### Checking Multicollinearity\n",
    "\n",
    "- In order to make statistical inferences from a logistic regression model, it is important to ensure that there is no multicollinearity present in the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "kmnEcClwrwqr",
    "outputId": "4fb6f54b-ccc3-44b0-aefd-23e8a96555e9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "const                        229.059548\n",
      "Age                            1.395224\n",
      "Gender                         1.102567\n",
      "BloodPres                      1.171241\n",
      "Chol                           1.128925\n",
      "FBSugar                        1.061637\n",
      "RestECG                        1.108472\n",
      "MaxHeartRate                   1.446678\n",
      "ExAngina                       1.456927\n",
      "PainType_asymptomatic          4.546796\n",
      "PainType_atypical angina       2.846549\n",
      "PainType_non\u0002anginal pain      3.863035\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "vif_series = pd.Series(\n",
    "    [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])],\n",
    "    index=X_train.columns,\n",
    "    dtype=float,\n",
    ")\n",
    "print(vif_series)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "21oCmTQYsp6O"
   },
   "source": [
    "**Observation**:\n",
    "- If Vif is higher than 5, we can say that the feature has high collinearity.\n",
    "- We can noticed that there is no result higher than 5. So we don't need to get rid of any attributes."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Fy1UtM_YtCXL"
   },
   "source": [
    "### Removing High P-value variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "0dqQdstksGik",
    "outputId": "5044eaff-84d6-46a8-9476-ddf8ad882986"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:              Diagnosis   No. Observations:                  242\n",
      "Model:                          Logit   Df Residuals:                      230\n",
      "Method:                           MLE   Df Model:                           11\n",
      "Date:                Sat, 19 Nov 2022   Pseudo R-squ.:                  0.3893\n",
      "Time:                        23:13:52   Log-Likelihood:                -102.03\n",
      "converged:                       True   LL-Null:                       -167.07\n",
      "Covariance Type:            nonrobust   LLR p-value:                 1.667e-22\n",
      "=============================================================================================\n",
      "                                coef    std err          z      P>|z|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------------------\n",
      "const                        -1.2762      2.579     -0.495      0.621      -6.331       3.779\n",
      "Age                           0.0186      0.024      0.788      0.431      -0.028       0.065\n",
      "Gender                        1.8790      0.429      4.376      0.000       1.037       2.721\n",
      "BloodPres                     0.0124      0.010      1.218      0.223      -0.008       0.032\n",
      "Chol                          0.0043      0.003      1.256      0.209      -0.002       0.011\n",
      "FBSugar                       0.0340      0.506      0.067      0.946      -0.957       1.025\n",
      "RestECG                       0.5038      0.361      1.394      0.163      -0.204       1.212\n",
      "MaxHeartRate                 -0.0324      0.010     -3.219      0.001      -0.052      -0.013\n",
      "ExAngina                      0.9792      0.410      2.388      0.017       0.175       1.783\n",
      "PainType_asymptomatic         1.3270      0.646      2.054      0.040       0.061       2.593\n",
      "PainType_atypical angina     -1.2540      0.839     -1.495      0.135      -2.898       0.390\n",
      "PainType_non\u0002anginal pain    -0.3795      0.658     -0.577      0.564      -1.669       0.910\n",
      "=============================================================================================\n"
     ]
    }
   ],
   "source": [
    "print(lg.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "aBnDCVukukOV"
   },
   "source": [
    "* There are so many variables have a high p-value which greater than 0.05, we will drop them iteratively as sometimes p-values change after dropping a variable. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Remove the Age column**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "4vQqd9pmuhPp",
    "outputId": "14771e25-0eb7-4cfb-aaa7-36ae0de498c0"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Warning: Maximum number of iterations has been exceeded.\n",
      "         Current function value: 0.422905\n",
      "         Iterations: 35\n",
      "         Function evaluations: 39\n",
      "         Gradient evaluations: 39\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:              Diagnosis   No. Observations:                  242\n",
      "Model:                          Logit   Df Residuals:                      231\n",
      "Method:                           MLE   Df Model:                           10\n",
      "Date:                Sat, 19 Nov 2022   Pseudo R-squ.:                  0.3874\n",
      "Time:                        23:13:52   Log-Likelihood:                -102.34\n",
      "converged:                      False   LL-Null:                       -167.07\n",
      "Covariance Type:            nonrobust   LLR p-value:                 6.028e-23\n",
      "=============================================================================================\n",
      "                                coef    std err          z      P>|z|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------------------\n",
      "const                         0.0056      2.108      0.003      0.998      -4.125       4.136\n",
      "Gender                        1.8189      0.423      4.299      0.000       0.990       2.648\n",
      "BloodPres                     0.0142      0.010      1.432      0.152      -0.005       0.034\n",
      "Chol                          0.0045      0.003      1.321      0.187      -0.002       0.011\n",
      "FBSugar                       0.0803      0.504      0.160      0.873      -0.907       1.068\n",
      "RestECG                       0.5294      0.361      1.467      0.142      -0.178       1.237\n",
      "MaxHeartRate                 -0.0357      0.009     -3.821      0.000      -0.054      -0.017\n",
      "ExAngina                      0.9671      0.409      2.366      0.018       0.166       1.768\n",
      "PainType_asymptomatic         1.3132      0.641      2.050      0.040       0.058       2.569\n",
      "PainType_atypical angina     -1.2620      0.835     -1.511      0.131      -2.899       0.375\n",
      "PainType_non\u0002anginal pain    -0.3906      0.654     -0.597      0.550      -1.672       0.891\n",
      "=============================================================================================\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/yuchenwang/opt/anaconda3/lib/python3.9/site-packages/statsmodels/base/model.py:566: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
      "  warnings.warn(\"Maximum Likelihood optimization failed to \"\n"
     ]
    }
   ],
   "source": [
    "X_train2 = X_train.drop([\"Age\"],axis=1)\n",
    "\n",
    "logit2 = sm.Logit(y_train, X_train2.astype(float))\n",
    "lg2 = logit2.fit(method=\"bfgs\")\n",
    "\n",
    "print(lg2.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Remove the BloodPres column**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "5Thl6jGtvZK8",
    "outputId": "aaf8d544-a352-4da5-cbab-4192fd4fd1d3"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/yuchenwang/opt/anaconda3/lib/python3.9/site-packages/statsmodels/base/model.py:566: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
      "  warnings.warn(\"Maximum Likelihood optimization failed to \"\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Warning: Maximum number of iterations has been exceeded.\n",
      "         Current function value: 0.427718\n",
      "         Iterations: 35\n",
      "         Function evaluations: 39\n",
      "         Gradient evaluations: 39\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:              Diagnosis   No. Observations:                  242\n",
      "Model:                          Logit   Df Residuals:                      232\n",
      "Method:                           MLE   Df Model:                            9\n",
      "Date:                Sat, 19 Nov 2022   Pseudo R-squ.:                  0.3805\n",
      "Time:                        23:13:52   Log-Likelihood:                -103.51\n",
      "converged:                      False   LL-Null:                       -167.07\n",
      "Covariance Type:            nonrobust   LLR p-value:                 4.618e-23\n",
      "=============================================================================================\n",
      "                                coef    std err          z      P>|z|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------------------\n",
      "const                         1.2998      1.660      0.783      0.434      -1.954       4.553\n",
      "Gender                        1.7937      0.418      4.289      0.000       0.974       2.613\n",
      "Chol                          0.0051      0.003      1.510      0.131      -0.002       0.012\n",
      "FBSugar                       0.2463      0.496      0.497      0.619      -0.726       1.218\n",
      "RestECG                       0.5774      0.361      1.601      0.109      -0.129       1.284\n",
      "MaxHeartRate                 -0.0327      0.009     -3.578      0.000      -0.051      -0.015\n",
      "ExAngina                      1.0601      0.403      2.628      0.009       0.270       1.851\n",
      "PainType_asymptomatic         1.2408      0.623      1.992      0.046       0.020       2.461\n",
      "PainType_atypical angina     -1.4742      0.827     -1.784      0.074      -3.094       0.146\n",
      "PainType_non\u0002anginal pain    -0.4793      0.637     -0.752      0.452      -1.728       0.770\n",
      "=============================================================================================\n"
     ]
    }
   ],
   "source": [
    "X_train3 = X_train2.drop([\"BloodPres\"],axis=1)\n",
    "\n",
    "logit3 = sm.Logit(y_train, X_train3.astype(float))\n",
    "lg3 = logit3.fit(method=\"bfgs\")\n",
    "\n",
    "print(lg3.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Get rid of the Chol column**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "C0xJTSE7vVmX",
    "outputId": "b048d005-5995-4e18-a024-762660246088"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Warning: Maximum number of iterations has been exceeded.\n",
      "         Current function value: 0.431933\n",
      "         Iterations: 35\n",
      "         Function evaluations: 39\n",
      "         Gradient evaluations: 39\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:              Diagnosis   No. Observations:                  242\n",
      "Model:                          Logit   Df Residuals:                      233\n",
      "Method:                           MLE   Df Model:                            8\n",
      "Date:                Sat, 19 Nov 2022   Pseudo R-squ.:                  0.3744\n",
      "Time:                        23:13:52   Log-Likelihood:                -104.53\n",
      "converged:                      False   LL-Null:                       -167.07\n",
      "Covariance Type:            nonrobust   LLR p-value:                 2.944e-23\n",
      "=============================================================================================\n",
      "                                coef    std err          z      P>|z|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------------------\n",
      "const                         2.6346      1.496      1.762      0.078      -0.297       5.566\n",
      "Gender                        1.6292      0.396      4.115      0.000       0.853       2.405\n",
      "FBSugar                       0.1707      0.490      0.349      0.727      -0.789       1.131\n",
      "RestECG                       0.6370      0.350      1.821      0.069      -0.049       1.323\n",
      "MaxHeartRate                 -0.0335      0.009     -3.760      0.000      -0.051      -0.016\n",
      "ExAngina                      1.1260      0.397      2.839      0.005       0.349       1.903\n",
      "PainType_asymptomatic         1.3382      0.622      2.150      0.032       0.118       2.558\n",
      "PainType_atypical angina     -1.0730      0.795     -1.349      0.177      -2.632       0.486\n",
      "PainType_non\u0002anginal pain    -0.3474      0.638     -0.545      0.586      -1.597       0.902\n",
      "=============================================================================================\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/yuchenwang/opt/anaconda3/lib/python3.9/site-packages/statsmodels/base/model.py:566: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
      "  warnings.warn(\"Maximum Likelihood optimization failed to \"\n"
     ]
    }
   ],
   "source": [
    "X_train4 = X_train3.drop([\"Chol\"],axis=1)\n",
    "\n",
    "logit4 = sm.Logit(y_train, X_train4.astype(float))\n",
    "lg4 = logit4.fit(method=\"bfgs\")\n",
    "\n",
    "print(lg4.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Get rid of the FBSugar column**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "AEwtFKWIv1jb",
    "outputId": "fea09d15-ac79-486c-a6aa-931864bff4c8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Warning: Maximum number of iterations has been exceeded.\n",
      "         Current function value: 0.432163\n",
      "         Iterations: 35\n",
      "         Function evaluations: 39\n",
      "         Gradient evaluations: 39\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:              Diagnosis   No. Observations:                  242\n",
      "Model:                          Logit   Df Residuals:                      234\n",
      "Method:                           MLE   Df Model:                            7\n",
      "Date:                Sat, 19 Nov 2022   Pseudo R-squ.:                  0.3740\n",
      "Time:                        23:13:52   Log-Likelihood:                -104.58\n",
      "converged:                      False   LL-Null:                       -167.07\n",
      "Covariance Type:            nonrobust   LLR p-value:                 7.032e-24\n",
      "=============================================================================================\n",
      "                                coef    std err          z      P>|z|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------------------\n",
      "const                         2.6556      1.497      1.774      0.076      -0.278       5.589\n",
      "Gender                        1.6302      0.396      4.119      0.000       0.854       2.406\n",
      "RestECG                       0.6424      0.349      1.839      0.066      -0.042       1.327\n",
      "MaxHeartRate                 -0.0334      0.009     -3.749      0.000      -0.051      -0.016\n",
      "ExAngina                      1.1370      0.393      2.892      0.004       0.366       1.908\n",
      "PainType_asymptomatic         1.3243      0.621      2.131      0.033       0.106       2.542\n",
      "PainType_atypical angina     -1.0838      0.796     -1.362      0.173      -2.643       0.476\n",
      "PainType_non\u0002anginal pain    -0.3411      0.636     -0.536      0.592      -1.588       0.906\n",
      "=============================================================================================\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/yuchenwang/opt/anaconda3/lib/python3.9/site-packages/statsmodels/base/model.py:566: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
      "  warnings.warn(\"Maximum Likelihood optimization failed to \"\n"
     ]
    }
   ],
   "source": [
    "X_train5 = X_train4.drop([\"FBSugar\"],axis=1)\n",
    "\n",
    "logit5 = sm.Logit(y_train, X_train5.astype(float))\n",
    "lg5 = logit5.fit(method=\"bfgs\")\n",
    "\n",
    "print(lg5.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Remove the PainType_non anginal pain column**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "eHjeOi_rwAxq",
    "outputId": "5b151cf5-4efb-462a-986e-892cf4871048"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Warning: Maximum number of iterations has been exceeded.\n",
      "         Current function value: 0.433381\n",
      "         Iterations: 35\n",
      "         Function evaluations: 39\n",
      "         Gradient evaluations: 39\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:              Diagnosis   No. Observations:                  242\n",
      "Model:                          Logit   Df Residuals:                      235\n",
      "Method:                           MLE   Df Model:                            6\n",
      "Date:                Sat, 19 Nov 2022   Pseudo R-squ.:                  0.3723\n",
      "Time:                        23:13:52   Log-Likelihood:                -104.88\n",
      "converged:                      False   LL-Null:                       -167.07\n",
      "Covariance Type:            nonrobust   LLR p-value:                 1.951e-24\n",
      "============================================================================================\n",
      "                               coef    std err          z      P>|z|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------------\n",
      "const                        2.1891      1.374      1.593      0.111      -0.504       4.882\n",
      "Gender                       1.6388      0.391      4.189      0.000       0.872       2.406\n",
      "RestECG                      0.6357      0.347      1.833      0.067      -0.044       1.315\n",
      "MaxHeartRate                -0.0319      0.009     -3.611      0.000      -0.049      -0.015\n",
      "ExAngina                     1.1628      0.393      2.957      0.003       0.392       1.934\n",
      "PainType_asymptomatic        1.5421      0.381      4.050      0.000       0.796       2.288\n",
      "PainType_atypical angina    -1.0043      0.651     -1.542      0.123      -2.281       0.272\n",
      "============================================================================================\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/yuchenwang/opt/anaconda3/lib/python3.9/site-packages/statsmodels/base/model.py:566: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
      "  warnings.warn(\"Maximum Likelihood optimization failed to \"\n"
     ]
    }
   ],
   "source": [
    "X_train6 = X_train5.drop([\"PainType_non\u0002anginal pain\"],axis=1)\n",
    "\n",
    "logit6 = sm.Logit(y_train, X_train6.astype(float))\n",
    "lg6 = logit6.fit(method=\"bfgs\")\n",
    "\n",
    "print(lg6.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Remove the PainType atypical angina column**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "fkfIq3IywNfh",
    "outputId": "8dd0522e-887b-46a2-e030-f484de4012f6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Warning: Maximum number of iterations has been exceeded.\n",
      "         Current function value: 0.438283\n",
      "         Iterations: 35\n",
      "         Function evaluations: 39\n",
      "         Gradient evaluations: 39\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:              Diagnosis   No. Observations:                  242\n",
      "Model:                          Logit   Df Residuals:                      236\n",
      "Method:                           MLE   Df Model:                            5\n",
      "Date:                Sat, 19 Nov 2022   Pseudo R-squ.:                  0.3652\n",
      "Time:                        23:13:52   Log-Likelihood:                -106.06\n",
      "converged:                      False   LL-Null:                       -167.07\n",
      "Covariance Type:            nonrobust   LLR p-value:                 1.175e-24\n",
      "=========================================================================================\n",
      "                            coef    std err          z      P>|z|      [0.025      0.975]\n",
      "-----------------------------------------------------------------------------------------\n",
      "const                     2.0585      1.374      1.498      0.134      -0.635       4.752\n",
      "Gender                    1.6577      0.392      4.231      0.000       0.890       2.426\n",
      "RestECG                   0.7154      0.345      2.074      0.038       0.039       1.392\n",
      "MaxHeartRate             -0.0327      0.009     -3.684      0.000      -0.050      -0.015\n",
      "ExAngina                  1.1284      0.391      2.884      0.004       0.362       1.895\n",
      "PainType_asymptomatic     1.7621      0.362      4.874      0.000       1.054       2.471\n",
      "=========================================================================================\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/yuchenwang/opt/anaconda3/lib/python3.9/site-packages/statsmodels/base/model.py:566: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
      "  warnings.warn(\"Maximum Likelihood optimization failed to \"\n"
     ]
    }
   ],
   "source": [
    "X_train7 = X_train6.drop([\"PainType_atypical angina\"],axis=1)\n",
    "\n",
    "logit7 = sm.Logit(y_train, X_train7.astype(float))\n",
    "lg7 = logit7.fit(method=\"bfgs\")\n",
    "\n",
    "print(lg7.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "jZN_mCXiwc5N"
   },
   "source": [
    "* Now there is no p-value greater than 0.05"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "eG366_5Xwh_N"
   },
   "source": [
    "### Checking performance of the new model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "LRQSlSO1wksZ"
   },
   "source": [
    "**Training set performance**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 279
    },
    "id": "4Uwa2N7XwXAc",
    "outputId": "0049676a-8eb5-43ea-ad74-c1e053c8ae73"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "confusion_matrix_statsmodels(lg7, X_train7, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 99
    },
    "id": "OqRkON6Gwryx",
    "outputId": "4339d38d-f445-49fc-b5b7-cc742498eb14"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training performance:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>Recall</th>\n",
       "      <th>Precision</th>\n",
       "      <th>F1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.789256</td>\n",
       "      <td>0.732143</td>\n",
       "      <td>0.796117</td>\n",
       "      <td>0.762791</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Accuracy    Recall  Precision        F1\n",
       "0  0.789256  0.732143   0.796117  0.762791"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_reg_model_train_perf = model_performance_classification_statsmodels(\n",
    "    lg7, X_train7, y_train\n",
    ")\n",
    "\n",
    "print(\"Training performance:\")\n",
    "log_reg_model_train_perf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "AOP2aIvNw2j7"
   },
   "source": [
    "**Test set performance**\n",
    "\n",
    "- We have to first drop the columns from the test set that were dropped from the training set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "id": "s3u5uT1wwy0Z",
    "outputId": "7fc2beb8-6234-4ca4-bbf7-47f76997e9e6"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>const</th>\n",
       "      <th>Gender</th>\n",
       "      <th>RestECG</th>\n",
       "      <th>MaxHeartRate</th>\n",
       "      <th>ExAngina</th>\n",
       "      <th>PainType_asymptomatic</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>204</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>161</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>159</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>151</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>219</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>182</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>174</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>132</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>184</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>161</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>150</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>288</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>163</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>259</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>141</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>179</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>173</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>146</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>61 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     const  Gender  RestECG  MaxHeartRate  ExAngina  PainType_asymptomatic\n",
       "204    1.0       1        0           161         0                      1\n",
       "159    1.0       1        0           151         0                      0\n",
       "219    1.0       1        1           182         0                      1\n",
       "174    1.0       1        1           132         0                      1\n",
       "184    1.0       0        1           161         0                      1\n",
       "..     ...     ...      ...           ...       ...                    ...\n",
       "0      1.0       1        1           150         0                      0\n",
       "288    1.0       1        1           163         0                      0\n",
       "259    1.0       1        0           141         0                      0\n",
       "179    1.0       1        1           173         0                      0\n",
       "110    1.0       0        1           146         1                      1\n",
       "\n",
       "[61 rows x 6 columns]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test7 = X_test[list(X_train7.columns)]\n",
    "X_test7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 279
    },
    "id": "aiTa_ho0w8lI",
    "outputId": "88b99b3c-730d-41bf-9a80-877898991dec"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "confusion_matrix_statsmodels(lg7, X_test7, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 99
    },
    "id": "aOpr44ryxBGd",
    "outputId": "5fac380c-7313-41b7-ffb6-745cfda545f0"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test performance:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>Recall</th>\n",
       "      <th>Precision</th>\n",
       "      <th>F1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.770492</td>\n",
       "      <td>0.740741</td>\n",
       "      <td>0.740741</td>\n",
       "      <td>0.740741</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Accuracy    Recall  Precision        F1\n",
       "0  0.770492  0.740741   0.740741  0.740741"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_reg_model_test_perf = model_performance_classification_statsmodels(\n",
    "    lg7, X_test7, y_test\n",
    ")\n",
    "\n",
    "print(\"Test performance:\")\n",
    "log_reg_model_test_perf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "1I-pFMOLxOIY"
   },
   "source": [
    "- The model is giving recall_score of 0.732 and 0.741 on the train and test sets respectively\n",
    "- As the train and test performances are comparable, the model is not overfitting\n",
    "- Moving forward to improve the performance of the model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "igUK070vxYz1"
   },
   "source": [
    "### Model Performance Improvement"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "IQj2f2BOxb-y"
   },
   "source": [
    "#### Trying to improve the Recall score by changing the threshold\n",
    "* We are going to use precision and recall curve to get a optimal threshold"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 446
    },
    "id": "o-EJseKSxEO2",
    "outputId": "e24add2c-12bd-4d68-91b9-c3c1215b8b4b"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_scores = lg7.predict(X_train7)\n",
    "prec, rec, tre = precision_recall_curve(y_train, y_scores,)\n",
    "\n",
    "\n",
    "def plot_prec_recall_vs_tresh(precisions, recalls, thresholds):\n",
    "    plt.plot(thresholds, precisions[:-1], \"b--\", label=\"precision\")\n",
    "    plt.plot(thresholds, recalls[:-1], \"g--\", label=\"recall\")\n",
    "    plt.xlabel(\"Threshold\")\n",
    "    plt.legend(loc=\"upper left\")\n",
    "    plt.ylim([0, 1])\n",
    "\n",
    "\n",
    "plt.figure(figsize=(10, 7))\n",
    "plot_prec_recall_vs_tresh(prec, rec, tre)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "GaZ6G4h8yEMO"
   },
   "source": [
    "* At the threshold of probably of 0.42, we get balanced recall and precision."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "kn-FxTdIyKzT"
   },
   "source": [
    "**Checking model performance on training set with new threshold**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 279
    },
    "id": "6se_p64Dx92w",
    "outputId": "b79c3f51-909e-4d8d-e6f7-81ce776acb4c"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "confusion_matrix_statsmodels(lg7, X_train7, y_train, threshold=0.42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 99
    },
    "id": "EyXMWeXtyRiW",
    "outputId": "66d4cf3d-9475-43ff-95a7-e26daf5e8893"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training performance:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>Recall</th>\n",
       "      <th>Precision</th>\n",
       "      <th>F1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.760331</td>\n",
       "      <td>0.758929</td>\n",
       "      <td>0.732759</td>\n",
       "      <td>0.745614</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Accuracy    Recall  Precision        F1\n",
       "0  0.760331  0.758929   0.732759  0.745614"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_reg_model_train_perf_threshold_curve = model_performance_classification_statsmodels(\n",
    "    lg7, X_train7, y_train, threshold=0.42\n",
    ")\n",
    "print(\"Training performance:\")\n",
    "log_reg_model_train_perf_threshold_curve"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "QtYLMw0qydFw"
   },
   "source": [
    "**Checking model performance on test set with new threshold**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 279
    },
    "id": "FBYyalY4yVKy",
    "outputId": "6d361dd0-9636-417c-eb5d-41b03cb59790"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "confusion_matrix_statsmodels(lg7, X_test7, y_test, threshold=0.42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 99
    },
    "id": "8gLX0iJIyjX7",
    "outputId": "8c9fe7b2-4a2e-4b40-e11d-064372953a03"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test performance:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>Recall</th>\n",
       "      <th>Precision</th>\n",
       "      <th>F1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.754098</td>\n",
       "      <td>0.740741</td>\n",
       "      <td>0.714286</td>\n",
       "      <td>0.727273</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Accuracy    Recall  Precision        F1\n",
       "0  0.754098  0.740741   0.714286  0.727273"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_reg_model_test_perf_threshold_curve = model_performance_classification_statsmodels(\n",
    "    lg7, X_test7, y_test, threshold=0.42\n",
    ")\n",
    "print(\"Test performance:\")\n",
    "log_reg_model_test_perf_threshold_curve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 112
    },
    "id": "i-7c35Bi9Fiu",
    "outputId": "65cb7ba9-34e5-43ab-f78b-9f792e3d6be9"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>const</th>\n",
       "      <th>Gender</th>\n",
       "      <th>RestECG</th>\n",
       "      <th>MaxHeartRate</th>\n",
       "      <th>ExAngina</th>\n",
       "      <th>PainType_asymptomatic</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Odds</th>\n",
       "      <td>7.834495</td>\n",
       "      <td>5.247068</td>\n",
       "      <td>2.044904</td>\n",
       "      <td>0.967786</td>\n",
       "      <td>3.090592</td>\n",
       "      <td>5.824890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Change_odd%</th>\n",
       "      <td>683.449488</td>\n",
       "      <td>424.706822</td>\n",
       "      <td>104.490414</td>\n",
       "      <td>-3.221412</td>\n",
       "      <td>209.059169</td>\n",
       "      <td>482.488987</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  const      Gender     RestECG  MaxHeartRate    ExAngina  \\\n",
       "Odds           7.834495    5.247068    2.044904      0.967786    3.090592   \n",
       "Change_odd%  683.449488  424.706822  104.490414     -3.221412  209.059169   \n",
       "\n",
       "             PainType_asymptomatic  \n",
       "Odds                      5.824890  \n",
       "Change_odd%             482.488987  "
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# converting coefficients to odds\n",
    "odds = np.exp(lg7.params)\n",
    "\n",
    "# finding the percentage change\n",
    "perc_change_odds = (np.exp(lg7.params) - 1) * 100\n",
    "\n",
    "# removing limit from number of columns to display\n",
    "pd.set_option(\"display.max_columns\", None)\n",
    "\n",
    "# adding the odds to a dataframe\n",
    "pd.DataFrame({\"Odds\": odds, \"Change_odd%\": perc_change_odds}, index=X_train7.columns).T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "u5JLmiMA9pge"
   },
   "source": [
    "### Coefficient interpretations\n",
    "\n",
    "* `Gender`: Holding all other features constant a unit change in Gender will increase the odds of a heart disease happen by 5.24 times or a 424.706% increase in odds.\n",
    "* `RestECG`: Holding all other features constant a unit change in RestECG will increase the odds of a heart disease happen by 2.04 times or a 104.5% increase in the odds.\n",
    "* `MaxHeartRate`: Holding all other features constant a unit change in MaxHeartRate will decrease the odds of a heart disease happen by 0.96 times or a 3.22% decrease in the odds.\n",
    "* `ExAngina`: Holding all other features constant a unit change in ExAngina will increase the odds a heart disease happen by 3.09 times or a 209% increase in the odds.\n",
    "* `PainType_asymptomatic`: Holding all other features constant a unit change in PainType_asymptomatic will increase the odds of a heart disease happen by 5.82 times or a 482.488% increase in the odds."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "jQrQ7zA3_O2l"
   },
   "source": [
    "## Summary\n",
    "* All in all, we can see that the logistic regressions are not overfitting. And the highest recall score is 0.74, even though we tune the model change the threshold, the recall score didn't change.\n",
    "* After tuned the model, the accuracy score even lower. It's probably due to the small size of this dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "7HrQmlWK4myn"
   },
   "source": [
    "**Resource:**\n",
    "\n",
    "[1].“HOW DO I INTERPRET ODDS RATIOS IN LOGISTIC REGRESSION?\n",
    "Introduction.” OARC Stats, https://stats.oarc.ucla.edu/other/mult-pkg/faq/general/faq-how-do-i-interpret-odds-ratios-in-logistic-regression/. \n",
    "\n",
    "[2].“Machine Learning - Confusion Matrix.” Python Machine Learning - Confusion Matrix, https://www.w3schools.com/python/python_ml_confusion_matrix.asp. \n",
    "\n",
    "[3].ProteusWRC. “How to Calculate Odds Ratios from Logistic Regression Coefficients.” YouTube, YouTube, 21 Aug. 2018, https://www.youtube.com/watch?v=RDY5MFVbRQE. \n",
    "\n",
    "[4].Zach. “How to Create a Precision-Recall Curve in Python.” Statology, 9 Sept. 2021, https://www.statology.org/precision-recall-curve-python/. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "rk6j-z-P_0te"
   },
   "source": [
    "**Link to the ensemble techniques:**\n",
    "- Our group want to use ensemble techniques to predict soccer game result in the final project, here we use this method to apply on this small dataset as a practice. \n",
    "- The highest recall score is 0.75 in our ensemble techniques model, even though it isn't improve too much, we thought that will be a good opportunity to use ensemble techniques.\n",
    "- https://github.com/ycwang15/Analytics_Programming/blob/main/Y_Wang_Project4_Ensemble_techniques.ipynb"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
