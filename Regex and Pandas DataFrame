{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "731cb077",
   "metadata": {},
   "source": [
    "## Project 3: Text Processing\n",
    "#### Team Member: Dengyi Liu; Xin Xiang; Yuchen Wang"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66bb4c17",
   "metadata": {},
   "source": [
    "### Import the necessary libraries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c8864697",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 6;\n",
       "                var nbb_unformatted_code = \"%load_ext nb_black\\nimport pandas as pd\\nimport os\\nimport numpy as np\\nimport re\\n\\nimport warnings\\n\\nwarnings.filterwarnings(\\\"ignore\\\")\";\n",
       "                var nbb_formatted_code = \"%load_ext nb_black\\nimport pandas as pd\\nimport os\\nimport numpy as np\\nimport re\\n\\nimport warnings\\n\\nwarnings.filterwarnings(\\\"ignore\\\")\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%load_ext nb_black\n",
    "import pandas as pd\n",
    "import os\n",
    "import numpy as np\n",
    "import re\n",
    "import base64\n",
    "import requests\n",
    "\n",
    "import warnings\n",
    "\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0925be1",
   "metadata": {},
   "source": [
    "### Upload the data from Github"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "60a027ca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-----------------------------------------------------------------------------------------\r\n",
      " Pair | Player Name                     |Total|Round|Round|Round|Round|Round|Round|Round| \r\n",
      " Num  | USCF ID / Rtg (Pre->Post)       | Pts |  1  |  2  |  3  |  4  |  5  |  6  |  7  | \r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "    1 | GARY HUA                        |6.0  |W  39|W  21|W  18|W  14|W   7|D  12|D   4|\r\n",
      "   ON | 15445895 / R: 1794   ->1817     |N:2  |W    |B    |W    |B    |W    |B    |W    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "    2 | DAKSHESH DARURI                 |6.0  |W  63|W  58|L   4|W  17|W  16|W  20|W   7|\r\n",
      "   MI | 14598900 / R: 1553   ->1663     |N:2  |B    |W    |B    |W    |B    |W    |B    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "    3 | ADITYA BAJAJ                    |6.0  |L   8|W  61|W  25|W  21|W  11|W  13|W  12|\r\n",
      "   MI | 14959604 / R: 1384   ->1640     |N:2  |W    |B    |W    |B    |W    |B    |W    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "    4 | PATRICK H SCHILLING             |5.5  |W  23|D  28|W   2|W  26|D   5|W  19|D   1|\r\n",
      "   MI | 12616049 / R: 1716   ->1744     |N:2  |W    |B    |W    |B    |W    |B    |B    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "    5 | HANSHI ZUO                      |5.5  |W  45|W  37|D  12|D  13|D   4|W  14|W  17|\r\n",
      "   MI | 14601533 / R: 1655   ->1690     |N:2  |B    |W    |B    |W    |B    |W    |B    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "    6 | HANSEN SONG                     |5.0  |W  34|D  29|L  11|W  35|D  10|W  27|W  21|\r\n",
      "   OH | 15055204 / R: 1686   ->1687     |N:3  |W    |B    |W    |B    |B    |W    |B    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "    7 | GARY DEE SWATHELL               |5.0  |W  57|W  46|W  13|W  11|L   1|W   9|L   2|\r\n",
      "   MI | 11146376 / R: 1649   ->1673     |N:3  |W    |B    |W    |B    |B    |W    |W    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "    8 | EZEKIEL HOUGHTON                |5.0  |W   3|W  32|L  14|L   9|W  47|W  28|W  19|\r\n",
      "   MI | 15142253 / R: 1641P17->1657P24  |N:3  |B    |W    |B    |W    |B    |W    |W    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "    9 | STEFANO LEE                     |5.0  |W  25|L  18|W  59|W   8|W  26|L   7|W  20|\r\n",
      "   ON | 14954524 / R: 1411   ->1564     |N:2  |W    |B    |W    |B    |W    |B    |B    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   10 | ANVIT RAO                       |5.0  |D  16|L  19|W  55|W  31|D   6|W  25|W  18|\r\n",
      "   MI | 14150362 / R: 1365   ->1544     |N:3  |W    |W    |B    |B    |W    |B    |W    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   11 | CAMERON WILLIAM MC LEMAN        |4.5  |D  38|W  56|W   6|L   7|L   3|W  34|W  26|\r\n",
      "   MI | 12581589 / R: 1712   ->1696     |N:3  |B    |W    |B    |W    |B    |W    |B    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   12 | KENNETH J TACK                  |4.5  |W  42|W  33|D   5|W  38|H    |D   1|L   3|\r\n",
      "   MI | 12681257 / R: 1663   ->1670     |N:3  |W    |B    |W    |B    |     |W    |B    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   13 | TORRANCE HENRY JR               |4.5  |W  36|W  27|L   7|D   5|W  33|L   3|W  32|\r\n",
      "   MI | 15082995 / R: 1666   ->1662     |N:3  |B    |W    |B    |B    |W    |W    |B    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   14 | BRADLEY SHAW                    |4.5  |W  54|W  44|W   8|L   1|D  27|L   5|W  31|\r\n",
      "   MI | 10131499 / R: 1610   ->1618     |N:3  |W    |B    |W    |W    |B    |B    |W    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   15 | ZACHARY JAMES HOUGHTON          |4.5  |D  19|L  16|W  30|L  22|W  54|W  33|W  38|\r\n",
      "   MI | 15619130 / R: 1220P13->1416P20  |N:3  |B    |B    |W    |W    |B    |B    |W    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   16 | MIKE NIKITIN                    |4.0  |D  10|W  15|H    |W  39|L   2|W  36|U    |\r\n",
      "   MI | 10295068 / R: 1604   ->1613     |N:3  |B    |W    |     |B    |W    |B    |     |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   17 | RONALD GRZEGORCZYK              |4.0  |W  48|W  41|L  26|L   2|W  23|W  22|L   5|\r\n",
      "   MI | 10297702 / R: 1629   ->1610     |N:3  |W    |B    |W    |B    |W    |B    |W    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   18 | DAVID SUNDEEN                   |4.0  |W  47|W   9|L   1|W  32|L  19|W  38|L  10|\r\n",
      "   MI | 11342094 / R: 1600   ->1600     |N:3  |B    |W    |B    |W    |B    |W    |B    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   19 | DIPANKAR ROY                    |4.0  |D  15|W  10|W  52|D  28|W  18|L   4|L   8|\r\n",
      "   MI | 14862333 / R: 1564   ->1570     |N:3  |W    |B    |W    |B    |W    |W    |B    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   20 | JASON ZHENG                     |4.0  |L  40|W  49|W  23|W  41|W  28|L   2|L   9|\r\n",
      "   MI | 14529060 / R: 1595   ->1569     |N:4  |W    |B    |W    |B    |W    |B    |W    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   21 | DINH DANG BUI                   |4.0  |W  43|L   1|W  47|L   3|W  40|W  39|L   6|\r\n",
      "   ON | 15495066 / R: 1563P22->1562     |N:3  |B    |W    |B    |W    |W    |B    |W    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   22 | EUGENE L MCCLURE                |4.0  |W  64|D  52|L  28|W  15|H    |L  17|W  40|\r\n",
      "   MI | 12405534 / R: 1555   ->1529     |N:4  |W    |B    |W    |B    |     |W    |B    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   23 | ALAN BUI                        |4.0  |L   4|W  43|L  20|W  58|L  17|W  37|W  46|\r\n",
      "   ON | 15030142 / R: 1363   ->1371     |     |B    |W    |B    |W    |B    |W    |B    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   24 | MICHAEL R ALDRICH               |4.0  |L  28|L  47|W  43|L  25|W  60|W  44|W  39|\r\n",
      "   MI | 13469010 / R: 1229   ->1300     |N:4  |B    |W    |B    |B    |W    |W    |B    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   25 | LOREN SCHWIEBERT                |3.5  |L   9|W  53|L   3|W  24|D  34|L  10|W  47|\r\n",
      "   MI | 12486656 / R: 1745   ->1681     |N:4  |B    |W    |B    |W    |B    |W    |B    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   26 | MAX ZHU                         |3.5  |W  49|W  40|W  17|L   4|L   9|D  32|L  11|\r\n",
      "   ON | 15131520 / R: 1579   ->1564     |N:4  |B    |W    |B    |W    |B    |W    |W    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   27 | GAURAV GIDWANI                  |3.5  |W  51|L  13|W  46|W  37|D  14|L   6|U    |\r\n",
      "   MI | 14476567 / R: 1552   ->1539     |N:4  |W    |B    |W    |B    |W    |B    |     |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   28 | SOFIA ADINA STANESCU-BELLU      |3.5  |W  24|D   4|W  22|D  19|L  20|L   8|D  36|\r\n",
      "   MI | 14882954 / R: 1507   ->1513     |N:3  |W    |W    |B    |W    |B    |B    |W    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   29 | CHIEDOZIE OKORIE                |3.5  |W  50|D   6|L  38|L  34|W  52|W  48|U    |\r\n",
      "   MI | 15323285 / R: 1602P6 ->1508P12  |N:4  |B    |W    |B    |W    |W    |B    |     |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   30 | GEORGE AVERY JONES              |3.5  |L  52|D  64|L  15|W  55|L  31|W  61|W  50|\r\n",
      "   ON | 12577178 / R: 1522   ->1444     |     |W    |B    |B    |W    |W    |B    |B    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   31 | RISHI SHETTY                    |3.5  |L  58|D  55|W  64|L  10|W  30|W  50|L  14|\r\n",
      "   MI | 15131618 / R: 1494   ->1444     |     |B    |W    |B    |W    |B    |W    |B    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   32 | JOSHUA PHILIP MATHEWS           |3.5  |W  61|L   8|W  44|L  18|W  51|D  26|L  13|\r\n",
      "   ON | 14073750 / R: 1441   ->1433     |N:4  |W    |B    |W    |B    |W    |B    |W    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   33 | JADE GE                         |3.5  |W  60|L  12|W  50|D  36|L  13|L  15|W  51|\r\n",
      "   MI | 14691842 / R: 1449   ->1421     |     |B    |W    |B    |W    |B    |W    |B    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   34 | MICHAEL JEFFERY THOMAS          |3.5  |L   6|W  60|L  37|W  29|D  25|L  11|W  52|\r\n",
      "   MI | 15051807 / R: 1399   ->1400     |     |B    |W    |B    |B    |W    |B    |W    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   35 | JOSHUA DAVID LEE                |3.5  |L  46|L  38|W  56|L   6|W  57|D  52|W  48|\r\n",
      "   MI | 14601397 / R: 1438   ->1392     |     |W    |W    |B    |W    |B    |B    |W    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   36 | SIDDHARTH JHA                   |3.5  |L  13|W  57|W  51|D  33|H    |L  16|D  28|\r\n",
      "   MI | 14773163 / R: 1355   ->1367     |N:4  |W    |B    |W    |B    |     |W    |B    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   37 | AMIYATOSH PWNANANDAM            |3.5  |B    |L   5|W  34|L  27|H    |L  23|W  61|\r\n",
      "   MI | 15489571 / R:  980P12->1077P17  |     |     |B    |W    |W    |     |B    |W    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   38 | BRIAN LIU                       |3.0  |D  11|W  35|W  29|L  12|H    |L  18|L  15|\r\n",
      "   MI | 15108523 / R: 1423   ->1439     |N:4  |W    |B    |W    |W    |     |B    |B    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   39 | JOEL R HENDON                   |3.0  |L   1|W  54|W  40|L  16|W  44|L  21|L  24|\r\n",
      "   MI | 12923035 / R: 1436P23->1413     |N:4  |B    |W    |B    |W    |B    |W    |W    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   40 | FOREST ZHANG                    |3.0  |W  20|L  26|L  39|W  59|L  21|W  56|L  22|\r\n",
      "   MI | 14892710 / R: 1348   ->1346     |     |B    |B    |W    |W    |B    |W    |W    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   41 | KYLE WILLIAM MURPHY             |3.0  |W  59|L  17|W  58|L  20|X    |U    |U    |\r\n",
      "   MI | 15761443 / R: 1403P5 ->1341P9   |     |B    |W    |B    |W    |     |     |     |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   42 | JARED GE                        |3.0  |L  12|L  50|L  57|D  60|D  61|W  64|W  56|\r\n",
      "   MI | 14462326 / R: 1332   ->1256     |     |B    |W    |B    |B    |W    |W    |B    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   43 | ROBERT GLEN VASEY               |3.0  |L  21|L  23|L  24|W  63|W  59|L  46|W  55|\r\n",
      "   MI | 14101068 / R: 1283   ->1244     |     |W    |B    |W    |W    |B    |B    |W    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   44 | JUSTIN D SCHILLING              |3.0  |B    |L  14|L  32|W  53|L  39|L  24|W  59|\r\n",
      "   MI | 15323504 / R: 1199   ->1199     |     |     |W    |B    |B    |W    |B    |W    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   45 | DEREK YAN                       |3.0  |L   5|L  51|D  60|L  56|W  63|D  55|W  58|\r\n",
      "   MI | 15372807 / R: 1242   ->1191     |     |W    |B    |W    |B    |W    |B    |W    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   46 | JACOB ALEXANDER LAVALLEY        |3.0  |W  35|L   7|L  27|L  50|W  64|W  43|L  23|\r\n",
      "   MI | 15490981 / R:  377P3 ->1076P10  |     |B    |W    |B    |W    |B    |W    |W    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   47 | ERIC WRIGHT                     |2.5  |L  18|W  24|L  21|W  61|L   8|D  51|L  25|\r\n",
      "   MI | 12533115 / R: 1362   ->1341     |     |W    |B    |W    |B    |W    |B    |W    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   48 | DANIEL KHAIN                    |2.5  |L  17|W  63|H    |D  52|H    |L  29|L  35|\r\n",
      "   MI | 14369165 / R: 1382   ->1335     |     |B    |W    |     |B    |     |W    |B    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   49 | MICHAEL J MARTIN                |2.5  |L  26|L  20|D  63|D  64|W  58|H    |U    |\r\n",
      "   MI | 12531685 / R: 1291P12->1259P17  |     |W    |W    |B    |W    |B    |     |     |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   50 | SHIVAM JHA                      |2.5  |L  29|W  42|L  33|W  46|H    |L  31|L  30|\r\n",
      "   MI | 14773178 / R: 1056   ->1111     |     |W    |B    |W    |B    |     |B    |W    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   51 | TEJAS AYYAGARI                  |2.5  |L  27|W  45|L  36|W  57|L  32|D  47|L  33|\r\n",
      "   MI | 15205474 / R: 1011   ->1097     |     |B    |W    |B    |W    |B    |W    |W    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   52 | ETHAN GUO                       |2.5  |W  30|D  22|L  19|D  48|L  29|D  35|L  34|\r\n",
      "   MI | 14918803 / R:  935   ->1092     |N:4  |B    |W    |B    |W    |B    |W    |B    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   53 | JOSE C YBARRA                   |2.0  |H    |L  25|H    |L  44|U    |W  57|U    |\r\n",
      "   MI | 12578849 / R: 1393   ->1359     |     |     |B    |     |W    |     |W    |     |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   54 | LARRY HODGE                     |2.0  |L  14|L  39|L  61|B    |L  15|L  59|W  64|\r\n",
      "   MI | 12836773 / R: 1270   ->1200     |     |B    |B    |W    |     |W    |B    |W    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   55 | ALEX KONG                       |2.0  |L  62|D  31|L  10|L  30|B    |D  45|L  43|\r\n",
      "   MI | 15412571 / R: 1186   ->1163     |     |W    |B    |W    |B    |     |W    |B    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   56 | MARISA RICCI                    |2.0  |H    |L  11|L  35|W  45|H    |L  40|L  42|\r\n",
      "   MI | 14679887 / R: 1153   ->1140     |     |     |B    |W    |W    |     |B    |W    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   57 | MICHAEL LU                      |2.0  |L   7|L  36|W  42|L  51|L  35|L  53|B    |\r\n",
      "   MI | 15113330 / R: 1092   ->1079     |     |B    |W    |W    |B    |W    |B    |     |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   58 | VIRAJ MOHILE                    |2.0  |W  31|L   2|L  41|L  23|L  49|B    |L  45|\r\n",
      "   MI | 14700365 / R:  917   -> 941     |     |W    |B    |W    |B    |W    |     |B    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   59 | SEAN M MC CORMICK               |2.0  |L  41|B    |L   9|L  40|L  43|W  54|L  44|\r\n",
      "   MI | 12841036 / R:  853   -> 878     |     |W    |     |B    |B    |W    |W    |B    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   60 | JULIA SHEN                      |1.5  |L  33|L  34|D  45|D  42|L  24|H    |U    |\r\n",
      "   MI | 14579262 / R:  967   -> 984     |     |W    |B    |B    |W    |B    |     |     |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   61 | JEZZEL FARKAS                   |1.5  |L  32|L   3|W  54|L  47|D  42|L  30|L  37|\r\n",
      "   ON | 15771592 / R:  955P11-> 979P18  |     |B    |W    |B    |W    |B    |W    |B    |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   62 | ASHWIN BALAJI                   |1.0  |W  55|U    |U    |U    |U    |U    |U    |\r\n",
      "   MI | 15219542 / R: 1530   ->1535     |     |B    |     |     |     |     |     |     |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   63 | THOMAS JOSEPH HOSMER            |1.0  |L   2|L  48|D  49|L  43|L  45|H    |U    |\r\n",
      "   MI | 15057092 / R: 1175   ->1125     |     |W    |B    |W    |B    |B    |     |     |\r\n",
      "-----------------------------------------------------------------------------------------\r\n",
      "   64 | BEN LI                          |1.0  |L  22|D  30|L  31|D  49|L  46|L  42|L  54|\r\n",
      "   MI | 15006561 / R: 1163   ->1112     |     |B    |W    |W    |B    |W    |B    |B    |\r\n",
      "-----------------------------------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "url = \"https://raw.githubusercontent.com/DengyiLiu/Project-3/main/tournamentinfo.txt\"\n",
    "contents = requests.get(url)\n",
    "contents = contents.text\n",
    "print(contents)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7714a49",
   "metadata": {},
   "source": [
    "### Getting the players' pair number and name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4ac50e40",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['1 GARY HUA ',\n",
       " '2 DAKSHESH DARURI ',\n",
       " '3 ADITYA BAJAJ ',\n",
       " '4 PATRICK H SCHILLING',\n",
       " '5 HANSHI ZUO ',\n",
       " '6 HANSEN SONG ',\n",
       " '7 GARY DEE SWATHELL',\n",
       " '8 EZEKIEL HOUGHTON ',\n",
       " '9 STEFANO LEE ',\n",
       " '10 ANVIT RAO ',\n",
       " '11 CAMERON WILLIAM MC',\n",
       " '12 KENNETH J TACK',\n",
       " '13 TORRANCE HENRY JR',\n",
       " '14 BRADLEY SHAW ',\n",
       " '15 ZACHARY JAMES HOUGHTON',\n",
       " '16 MIKE NIKITIN ',\n",
       " '17 RONALD GRZEGORCZYK ',\n",
       " '18 DAVID SUNDEEN ',\n",
       " '19 DIPANKAR ROY ',\n",
       " '20 JASON ZHENG ',\n",
       " '21 DINH DANG BUI',\n",
       " '22 EUGENE L MCCLURE',\n",
       " '23 ALAN BUI ',\n",
       " '24 MICHAEL R ALDRICH',\n",
       " '25 LOREN SCHWIEBERT ',\n",
       " '26 MAX ZHU ',\n",
       " '27 GAURAV GIDWANI ',\n",
       " '28 SOFIA ADINA STANESCU',\n",
       " '29 CHIEDOZIE OKORIE ',\n",
       " '30 GEORGE AVERY JONES',\n",
       " '31 RISHI SHETTY ',\n",
       " '32 JOSHUA PHILIP MATHEWS',\n",
       " '33 JADE GE ',\n",
       " '34 MICHAEL JEFFERY THOMAS',\n",
       " '35 JOSHUA DAVID LEE',\n",
       " '36 SIDDHARTH JHA ',\n",
       " '37 AMIYATOSH PWNANANDAM ',\n",
       " '38 BRIAN LIU ',\n",
       " '39 JOEL R HENDON',\n",
       " '40 FOREST ZHANG ',\n",
       " '41 KYLE WILLIAM MURPHY',\n",
       " '42 JARED GE ',\n",
       " '43 ROBERT GLEN VASEY',\n",
       " '44 JUSTIN D SCHILLING',\n",
       " '45 DEREK YAN ',\n",
       " '46 JACOB ALEXANDER LAVALLEY',\n",
       " '47 ERIC WRIGHT ',\n",
       " '48 DANIEL KHAIN ',\n",
       " '49 MICHAEL J MARTIN',\n",
       " '50 SHIVAM JHA ',\n",
       " '51 TEJAS AYYAGARI ',\n",
       " '52 ETHAN GUO ',\n",
       " '53 JOSE C YBARRA',\n",
       " '54 LARRY HODGE ',\n",
       " '55 ALEX KONG ',\n",
       " '56 MARISA RICCI ',\n",
       " '57 MICHAEL LU ',\n",
       " '58 VIRAJ MOHILE ',\n",
       " '59 SEAN M MC',\n",
       " '60 JULIA SHEN ',\n",
       " '61 JEZZEL FARKAS ',\n",
       " '62 ASHWIN BALAJI ',\n",
       " '63 THOMAS JOSEPH HOSMER',\n",
       " '64 BEN LI ']"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 7;\n",
       "                var nbb_unformatted_code = \"num_name = re.findall(r\\\"[0-9]+\\\\s[|]\\\\s[\\\\w]+\\\\s[\\\\w]+\\\\s[\\\\w]*\\\", contents)\\nnum_name = list(map(lambda x: x.replace(\\\" | \\\", \\\" \\\"), num_name))\\nnum_name\";\n",
       "                var nbb_formatted_code = \"num_name = re.findall(r\\\"[0-9]+\\\\s[|]\\\\s[\\\\w]+\\\\s[\\\\w]+\\\\s[\\\\w]*\\\", contents)\\nnum_name = list(map(lambda x: x.replace(\\\" | \\\", \\\" \\\"), num_name))\\nnum_name\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "num_name = re.findall(r\"[0-9]+\\s[|]\\s[\\w]+\\s[\\w]+\\s[\\w]*\", contents)\n",
    "num_name = list(map(lambda x: x.replace(\" | \", \" \"), num_name))\n",
    "num_name"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "553cd9ef",
   "metadata": {},
   "source": [
    "### Gettting the pair number and name from the above num_name list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d481056a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64']\n",
      "['GARY HUA ', 'DAKSHESH DARURI ', 'ADITYA BAJAJ ', 'PATRICK H SCHILLING', 'HANSHI ZUO ', 'HANSEN SONG ', 'GARY DEE SWATHELL', 'EZEKIEL HOUGHTON ', 'STEFANO LEE ', 'ANVIT RAO ', 'CAMERON WILLIAM MC', 'KENNETH J TACK', 'TORRANCE HENRY JR', 'BRADLEY SHAW ', 'ZACHARY JAMES HOUGHTON', 'MIKE NIKITIN ', 'RONALD GRZEGORCZYK ', 'DAVID SUNDEEN ', 'DIPANKAR ROY ', 'JASON ZHENG ', 'DINH DANG BUI', 'EUGENE L MCCLURE', 'ALAN BUI ', 'MICHAEL R ALDRICH', 'LOREN SCHWIEBERT ', 'MAX ZHU ', 'GAURAV GIDWANI ', 'SOFIA ADINA STANESCU', 'CHIEDOZIE OKORIE ', 'GEORGE AVERY JONES', 'RISHI SHETTY ', 'JOSHUA PHILIP MATHEWS', 'JADE GE ', 'MICHAEL JEFFERY THOMAS', 'JOSHUA DAVID LEE', 'SIDDHARTH JHA ', 'AMIYATOSH PWNANANDAM ', 'BRIAN LIU ', 'JOEL R HENDON', 'FOREST ZHANG ', 'KYLE WILLIAM MURPHY', 'JARED GE ', 'ROBERT GLEN VASEY', 'JUSTIN D SCHILLING', 'DEREK YAN ', 'JACOB ALEXANDER LAVALLEY', 'ERIC WRIGHT ', 'DANIEL KHAIN ', 'MICHAEL J MARTIN', 'SHIVAM JHA ', 'TEJAS AYYAGARI ', 'ETHAN GUO ', 'JOSE C YBARRA', 'LARRY HODGE ', 'ALEX KONG ', 'MARISA RICCI ', 'MICHAEL LU ', 'VIRAJ MOHILE ', 'SEAN M MC', 'JULIA SHEN ', 'JEZZEL FARKAS ', 'ASHWIN BALAJI ', 'THOMAS JOSEPH HOSMER', 'BEN LI ']\n"
     ]
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 8;\n",
       "                var nbb_unformatted_code = \"pair_num = re.findall(\\\"[0-9]+\\\", str(num_name))\\nname = re.findall(\\\"[A-Za-z]+ [\\\\w]+ [\\\\w]*\\\", str(num_name))\\nprint(pair_num)\\nprint(name)\";\n",
       "                var nbb_formatted_code = \"pair_num = re.findall(\\\"[0-9]+\\\", str(num_name))\\nname = re.findall(\\\"[A-Za-z]+ [\\\\w]+ [\\\\w]*\\\", str(num_name))\\nprint(pair_num)\\nprint(name)\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pair_num = re.findall(\"[0-9]+\", str(num_name))\n",
    "name = re.findall(\"[A-Za-z]+ [\\w]+ [\\w]*\", str(num_name))\n",
    "print(pair_num)\n",
    "print(name)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8cf7f1ed",
   "metadata": {},
   "source": [
    "### Getting the total points for each player(6.0, 5.5 etc.,)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6d7b51d4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['6.0',\n",
       " '6.0',\n",
       " '6.0',\n",
       " '5.5',\n",
       " '5.5',\n",
       " '5.0',\n",
       " '5.0',\n",
       " '5.0',\n",
       " '5.0',\n",
       " '5.0',\n",
       " '4.5',\n",
       " '4.5',\n",
       " '4.5',\n",
       " '4.5',\n",
       " '4.5',\n",
       " '4.0',\n",
       " '4.0',\n",
       " '4.0',\n",
       " '4.0',\n",
       " '4.0',\n",
       " '4.0',\n",
       " '4.0',\n",
       " '4.0',\n",
       " '4.0',\n",
       " '3.5',\n",
       " '3.5',\n",
       " '3.5',\n",
       " '3.5',\n",
       " '3.5',\n",
       " '3.5',\n",
       " '3.5',\n",
       " '3.5',\n",
       " '3.5',\n",
       " '3.5',\n",
       " '3.5',\n",
       " '3.5',\n",
       " '3.5',\n",
       " '3.0',\n",
       " '3.0',\n",
       " '3.0',\n",
       " '3.0',\n",
       " '3.0',\n",
       " '3.0',\n",
       " '3.0',\n",
       " '3.0',\n",
       " '3.0',\n",
       " '2.5',\n",
       " '2.5',\n",
       " '2.5',\n",
       " '2.5',\n",
       " '2.5',\n",
       " '2.5',\n",
       " '2.0',\n",
       " '2.0',\n",
       " '2.0',\n",
       " '2.0',\n",
       " '2.0',\n",
       " '2.0',\n",
       " '2.0',\n",
       " '1.5',\n",
       " '1.5',\n",
       " '1.0',\n",
       " '1.0',\n",
       " '1.0']"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 9;\n",
       "                var nbb_unformatted_code = \"total_pts = re.findall(\\\"[0-9]{1}\\\\.[0-9]{1}\\\", contents)\\ntotal_pts\";\n",
       "                var nbb_formatted_code = \"total_pts = re.findall(\\\"[0-9]{1}\\\\.[0-9]{1}\\\", contents)\\ntotal_pts\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "total_pts = re.findall(\"[0-9]{1}\\.[0-9]{1}\", contents)\n",
    "total_pts"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f213cf0f",
   "metadata": {},
   "source": [
    "### Getting the pre points of each players"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7663acef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['R: 1794',\n",
       " 'R: 1553',\n",
       " 'R: 1384',\n",
       " 'R: 1716',\n",
       " 'R: 1655',\n",
       " 'R: 1686',\n",
       " 'R: 1649',\n",
       " 'R: 1641',\n",
       " 'R: 1411',\n",
       " 'R: 1365',\n",
       " 'R: 1712',\n",
       " 'R: 1663',\n",
       " 'R: 1666',\n",
       " 'R: 1610',\n",
       " 'R: 1220',\n",
       " 'R: 1604',\n",
       " 'R: 1629',\n",
       " 'R: 1600',\n",
       " 'R: 1564',\n",
       " 'R: 1595',\n",
       " 'R: 1563',\n",
       " 'R: 1555',\n",
       " 'R: 1363',\n",
       " 'R: 1229',\n",
       " 'R: 1745',\n",
       " 'R: 1579',\n",
       " 'R: 1552',\n",
       " 'R: 1507',\n",
       " 'R: 1602',\n",
       " 'R: 1522',\n",
       " 'R: 1494',\n",
       " 'R: 1441',\n",
       " 'R: 1449',\n",
       " 'R: 1399',\n",
       " 'R: 1438',\n",
       " 'R: 1355',\n",
       " 'R:  980',\n",
       " 'R: 1423',\n",
       " 'R: 1436',\n",
       " 'R: 1348',\n",
       " 'R: 1403',\n",
       " 'R: 1332',\n",
       " 'R: 1283',\n",
       " 'R: 1199',\n",
       " 'R: 1242',\n",
       " 'R:  377',\n",
       " 'R: 1362',\n",
       " 'R: 1382',\n",
       " 'R: 1291',\n",
       " 'R: 1056',\n",
       " 'R: 1011',\n",
       " 'R:  935',\n",
       " 'R: 1393',\n",
       " 'R: 1270',\n",
       " 'R: 1186',\n",
       " 'R: 1153',\n",
       " 'R: 1092',\n",
       " 'R:  917',\n",
       " 'R:  853',\n",
       " 'R:  967',\n",
       " 'R:  955',\n",
       " 'R: 1530',\n",
       " 'R: 1175',\n",
       " 'R: 1163']"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 10;\n",
       "                var nbb_unformatted_code = \"pre_pts = re.findall(\\\"R:\\\\s+[0-9]{3,4}\\\", contents)\\npre_pts\";\n",
       "                var nbb_formatted_code = \"pre_pts = re.findall(\\\"R:\\\\s+[0-9]{3,4}\\\", contents)\\npre_pts\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pre_pts = re.findall(\"R:\\s+[0-9]{3,4}\", contents)\n",
    "pre_pts"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11209337",
   "metadata": {},
   "source": [
    "### Replace the unnecessary content with space and then we can get the pre point for each player."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "016a9371",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['1794',\n",
       " '1553',\n",
       " '1384',\n",
       " '1716',\n",
       " '1655',\n",
       " '1686',\n",
       " '1649',\n",
       " '1641',\n",
       " '1411',\n",
       " '1365',\n",
       " '1712',\n",
       " '1663',\n",
       " '1666',\n",
       " '1610',\n",
       " '1220',\n",
       " '1604',\n",
       " '1629',\n",
       " '1600',\n",
       " '1564',\n",
       " '1595',\n",
       " '1563',\n",
       " '1555',\n",
       " '1363',\n",
       " '1229',\n",
       " '1745',\n",
       " '1579',\n",
       " '1552',\n",
       " '1507',\n",
       " '1602',\n",
       " '1522',\n",
       " '1494',\n",
       " '1441',\n",
       " '1449',\n",
       " '1399',\n",
       " '1438',\n",
       " '1355',\n",
       " '980',\n",
       " '1423',\n",
       " '1436',\n",
       " '1348',\n",
       " '1403',\n",
       " '1332',\n",
       " '1283',\n",
       " '1199',\n",
       " '1242',\n",
       " '377',\n",
       " '1362',\n",
       " '1382',\n",
       " '1291',\n",
       " '1056',\n",
       " '1011',\n",
       " '935',\n",
       " '1393',\n",
       " '1270',\n",
       " '1186',\n",
       " '1153',\n",
       " '1092',\n",
       " '917',\n",
       " '853',\n",
       " '967',\n",
       " '955',\n",
       " '1530',\n",
       " '1175',\n",
       " '1163']"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 11;\n",
       "                var nbb_unformatted_code = \"pre_pts1 = list(map(lambda x: x.replace(\\\"R: \\\", \\\"\\\"), pre_pts))\\npre_pts2 = list(map(lambda x: x.replace(\\\" \\\", \\\"\\\"), pre_pts1))\\npre_pts2\";\n",
       "                var nbb_formatted_code = \"pre_pts1 = list(map(lambda x: x.replace(\\\"R: \\\", \\\"\\\"), pre_pts))\\npre_pts2 = list(map(lambda x: x.replace(\\\" \\\", \\\"\\\"), pre_pts1))\\npre_pts2\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pre_pts1 = list(map(lambda x: x.replace(\"R: \", \"\"), pre_pts))\n",
    "pre_pts2 = list(map(lambda x: x.replace(\" \", \"\"), pre_pts1))\n",
    "pre_pts2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a53e94cf",
   "metadata": {},
   "source": [
    "### Getting the State of each player"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a4b9519a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['ON',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'OH',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'ON',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'ON',\n",
       " 'MI',\n",
       " 'ON',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'ON',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'ON',\n",
       " 'MI',\n",
       " 'ON',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'ON',\n",
       " 'MI',\n",
       " 'MI',\n",
       " 'MI']"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 12;\n",
       "                var nbb_unformatted_code = \"state = re.findall(r\\\"[A-Z][A-Z] [|]\\\", contents)\\nstate1 = list(map(lambda x: x.replace(\\\" |\\\", \\\"\\\"), state))\\nstate1\";\n",
       "                var nbb_formatted_code = \"state = re.findall(r\\\"[A-Z][A-Z] [|]\\\", contents)\\nstate1 = list(map(lambda x: x.replace(\\\" |\\\", \\\"\\\"), state))\\nstate1\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "state = re.findall(r\"[A-Z][A-Z] [|]\", contents)\n",
    "state1 = list(map(lambda x: x.replace(\" |\", \"\"), state))\n",
    "state1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f157b0c",
   "metadata": {},
   "source": [
    "### We can create a dataframe, based on the above lists,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "eab4a5b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pair_num</th>\n",
       "      <th>name</th>\n",
       "      <th>total points</th>\n",
       "      <th>state</th>\n",
       "      <th>pre rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>GARY HUA</td>\n",
       "      <td>6.0</td>\n",
       "      <td>ON</td>\n",
       "      <td>1794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>DAKSHESH DARURI</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>ADITYA BAJAJ</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1384</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>PATRICK H SCHILLING</td>\n",
       "      <td>5.5</td>\n",
       "      <td>MI</td>\n",
       "      <td>1716</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>HANSHI ZUO</td>\n",
       "      <td>5.5</td>\n",
       "      <td>MI</td>\n",
       "      <td>1655</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>60</td>\n",
       "      <td>JULIA SHEN</td>\n",
       "      <td>1.5</td>\n",
       "      <td>MI</td>\n",
       "      <td>967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>61</td>\n",
       "      <td>JEZZEL FARKAS</td>\n",
       "      <td>1.5</td>\n",
       "      <td>ON</td>\n",
       "      <td>955</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>62</td>\n",
       "      <td>ASHWIN BALAJI</td>\n",
       "      <td>1.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>63</td>\n",
       "      <td>THOMAS JOSEPH HOSMER</td>\n",
       "      <td>1.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>64</td>\n",
       "      <td>BEN LI</td>\n",
       "      <td>1.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1163</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>64 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   pair_num                  name total points state pre rating\n",
       "0         1             GARY HUA           6.0    ON       1794\n",
       "1         2      DAKSHESH DARURI           6.0    MI       1553\n",
       "2         3         ADITYA BAJAJ           6.0    MI       1384\n",
       "3         4   PATRICK H SCHILLING          5.5    MI       1716\n",
       "4         5           HANSHI ZUO           5.5    MI       1655\n",
       "..      ...                   ...          ...   ...        ...\n",
       "59       60           JULIA SHEN           1.5    MI        967\n",
       "60       61        JEZZEL FARKAS           1.5    ON        955\n",
       "61       62        ASHWIN BALAJI           1.0    MI       1530\n",
       "62       63  THOMAS JOSEPH HOSMER          1.0    MI       1175\n",
       "63       64               BEN LI           1.0    MI       1163\n",
       "\n",
       "[64 rows x 5 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 13;\n",
       "                var nbb_unformatted_code = \"df = pd.DataFrame(\\n    {\\n        \\\"pair_num\\\": pair_num,\\n        \\\"name\\\": name,\\n        \\\"total points\\\": total_pts,\\n        \\\"state\\\": state1,\\n        \\\"pre rating\\\": pre_pts2,\\n    }\\n)\\ndf\";\n",
       "                var nbb_formatted_code = \"df = pd.DataFrame(\\n    {\\n        \\\"pair_num\\\": pair_num,\\n        \\\"name\\\": name,\\n        \\\"total points\\\": total_pts,\\n        \\\"state\\\": state1,\\n        \\\"pre rating\\\": pre_pts2,\\n    }\\n)\\ndf\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = pd.DataFrame(\n",
    "    {\n",
    "        \"pair_num\": pair_num,\n",
    "        \"name\": name,\n",
    "        \"total points\": total_pts,\n",
    "        \"state\": state1,\n",
    "        \"pre rating\": pre_pts2,\n",
    "    }\n",
    ")\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fabce275",
   "metadata": {},
   "source": [
    "* Now, we can get a dataframe that contains the player's pair num, name, total points, state and pre rating."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8210cc56",
   "metadata": {},
   "source": [
    "### Spliting each row in content by the pair num and name regex to get the rest information of each player."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a7a10d0b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['                       |6.0  |W  39|W  21|W  18|W  14|W   7|D  12|D   4|\\r\\n   ON | 15445895 / R: 1794   ->1817     |N:2  |W    |B    |W    |B    |W    |B    |W    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n    ',\n",
       " '                |6.0  |W  63|W  58|L   4|W  17|W  16|W  20|W   7|\\r\\n   MI | 14598900 / R: 1553   ->1663     |N:2  |B    |W    |B    |W    |B    |W    |B    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n    ',\n",
       " '                   |6.0  |L   8|W  61|W  25|W  21|W  11|W  13|W  12|\\r\\n   MI | 14959604 / R: 1384   ->1640     |N:2  |W    |B    |W    |B    |W    |B    |W    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n    ',\n",
       " '             |5.5  |W  23|D  28|W   2|W  26|D   5|W  19|D   1|\\r\\n   MI | 12616049 / R: 1716   ->1744     |N:2  |W    |B    |W    |B    |W    |B    |B    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n    ',\n",
       " '                     |5.5  |W  45|W  37|D  12|D  13|D   4|W  14|W  17|\\r\\n   MI | 14601533 / R: 1655   ->1690     |N:2  |B    |W    |B    |W    |B    |W    |B    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n    ',\n",
       " '                    |5.0  |W  34|D  29|L  11|W  35|D  10|W  27|W  21|\\r\\n   OH | 15055204 / R: 1686   ->1687     |N:3  |W    |B    |W    |B    |B    |W    |B    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n    ',\n",
       " '               |5.0  |W  57|W  46|W  13|W  11|L   1|W   9|L   2|\\r\\n   MI | 11146376 / R: 1649   ->1673     |N:3  |W    |B    |W    |B    |B    |W    |W    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n    ',\n",
       " '               |5.0  |W   3|W  32|L  14|L   9|W  47|W  28|W  19|\\r\\n   MI | 15142253 / R: 1641P17->1657P24  |N:3  |B    |W    |B    |W    |B    |W    |W    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n    ',\n",
       " '                    |5.0  |W  25|L  18|W  59|W   8|W  26|L   7|W  20|\\r\\n   ON | 14954524 / R: 1411   ->1564     |N:2  |W    |B    |W    |B    |W    |B    |B    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                      |5.0  |D  16|L  19|W  55|W  31|D   6|W  25|W  18|\\r\\n   MI | 14150362 / R: 1365   ->1544     |N:3  |W    |W    |B    |B    |W    |B    |W    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " ' LEMAN        |4.5  |D  38|W  56|W   6|L   7|L   3|W  34|W  26|\\r\\n   MI | 12581589 / R: 1712   ->1696     |N:3  |B    |W    |B    |W    |B    |W    |B    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                  |4.5  |W  42|W  33|D   5|W  38|H    |D   1|L   3|\\r\\n   MI | 12681257 / R: 1663   ->1670     |N:3  |W    |B    |W    |B    |     |W    |B    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '               |4.5  |W  36|W  27|L   7|D   5|W  33|L   3|W  32|\\r\\n   MI | 15082995 / R: 1666   ->1662     |N:3  |B    |W    |B    |B    |W    |W    |B    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                   |4.5  |W  54|W  44|W   8|L   1|D  27|L   5|W  31|\\r\\n   MI | 10131499 / R: 1610   ->1618     |N:3  |W    |B    |W    |W    |B    |B    |W    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '          |4.5  |D  19|L  16|W  30|L  22|W  54|W  33|W  38|\\r\\n   MI | 15619130 / R: 1220P13->1416P20  |N:3  |B    |B    |W    |W    |B    |B    |W    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                   |4.0  |D  10|W  15|H    |W  39|L   2|W  36|U    |\\r\\n   MI | 10295068 / R: 1604   ->1613     |N:3  |B    |W    |     |B    |W    |B    |     |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '             |4.0  |W  48|W  41|L  26|L   2|W  23|W  22|L   5|\\r\\n   MI | 10297702 / R: 1629   ->1610     |N:3  |W    |B    |W    |B    |W    |B    |W    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                  |4.0  |W  47|W   9|L   1|W  32|L  19|W  38|L  10|\\r\\n   MI | 11342094 / R: 1600   ->1600     |N:3  |B    |W    |B    |W    |B    |W    |B    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                   |4.0  |D  15|W  10|W  52|D  28|W  18|L   4|L   8|\\r\\n   MI | 14862333 / R: 1564   ->1570     |N:3  |W    |B    |W    |B    |W    |W    |B    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                    |4.0  |L  40|W  49|W  23|W  41|W  28|L   2|L   9|\\r\\n   MI | 14529060 / R: 1595   ->1569     |N:4  |W    |B    |W    |B    |W    |B    |W    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                   |4.0  |W  43|L   1|W  47|L   3|W  40|W  39|L   6|\\r\\n   ON | 15495066 / R: 1563P22->1562     |N:3  |B    |W    |B    |W    |W    |B    |W    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                |4.0  |W  64|D  52|L  28|W  15|H    |L  17|W  40|\\r\\n   MI | 12405534 / R: 1555   ->1529     |N:4  |W    |B    |W    |B    |     |W    |B    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                       |4.0  |L   4|W  43|L  20|W  58|L  17|W  37|W  46|\\r\\n   ON | 15030142 / R: 1363   ->1371     |     |B    |W    |B    |W    |B    |W    |B    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '               |4.0  |L  28|L  47|W  43|L  25|W  60|W  44|W  39|\\r\\n   MI | 13469010 / R: 1229   ->1300     |N:4  |B    |W    |B    |B    |W    |W    |B    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '               |3.5  |L   9|W  53|L   3|W  24|D  34|L  10|W  47|\\r\\n   MI | 12486656 / R: 1745   ->1681     |N:4  |B    |W    |B    |W    |B    |W    |B    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                        |3.5  |W  49|W  40|W  17|L   4|L   9|D  32|L  11|\\r\\n   ON | 15131520 / R: 1579   ->1564     |N:4  |B    |W    |B    |W    |B    |W    |W    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                 |3.5  |W  51|L  13|W  46|W  37|D  14|L   6|U    |\\r\\n   MI | 14476567 / R: 1552   ->1539     |N:4  |W    |B    |W    |B    |W    |B    |     |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '-BELLU      |3.5  |W  24|D   4|W  22|D  19|L  20|L   8|D  36|\\r\\n   MI | 14882954 / R: 1507   ->1513     |N:3  |W    |W    |B    |W    |B    |B    |W    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '               |3.5  |W  50|D   6|L  38|L  34|W  52|W  48|U    |\\r\\n   MI | 15323285 / R: 1602P6 ->1508P12  |N:4  |B    |W    |B    |W    |W    |B    |     |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '              |3.5  |L  52|D  64|L  15|W  55|L  31|W  61|W  50|\\r\\n   ON | 12577178 / R: 1522   ->1444     |     |W    |B    |B    |W    |W    |B    |B    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                   |3.5  |L  58|D  55|W  64|L  10|W  30|W  50|L  14|\\r\\n   MI | 15131618 / R: 1494   ->1444     |     |B    |W    |B    |W    |B    |W    |B    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '           |3.5  |W  61|L   8|W  44|L  18|W  51|D  26|L  13|\\r\\n   ON | 14073750 / R: 1441   ->1433     |N:4  |W    |B    |W    |B    |W    |B    |W    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                        |3.5  |W  60|L  12|W  50|D  36|L  13|L  15|W  51|\\r\\n   MI | 14691842 / R: 1449   ->1421     |     |B    |W    |B    |W    |B    |W    |B    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '          |3.5  |L   6|W  60|L  37|W  29|D  25|L  11|W  52|\\r\\n   MI | 15051807 / R: 1399   ->1400     |     |B    |W    |B    |B    |W    |B    |W    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                |3.5  |L  46|L  38|W  56|L   6|W  57|D  52|W  48|\\r\\n   MI | 14601397 / R: 1438   ->1392     |     |W    |W    |B    |W    |B    |B    |W    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                  |3.5  |L  13|W  57|W  51|D  33|H    |L  16|D  28|\\r\\n   MI | 14773163 / R: 1355   ->1367     |N:4  |W    |B    |W    |B    |     |W    |B    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '           |3.5  |B    |L   5|W  34|L  27|H    |L  23|W  61|\\r\\n   MI | 15489571 / R:  980P12->1077P17  |     |     |B    |W    |W    |     |B    |W    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                      |3.0  |D  11|W  35|W  29|L  12|H    |L  18|L  15|\\r\\n   MI | 15108523 / R: 1423   ->1439     |N:4  |W    |B    |W    |W    |     |B    |B    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                   |3.0  |L   1|W  54|W  40|L  16|W  44|L  21|L  24|\\r\\n   MI | 12923035 / R: 1436P23->1413     |N:4  |B    |W    |B    |W    |B    |W    |W    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                   |3.0  |W  20|L  26|L  39|W  59|L  21|W  56|L  22|\\r\\n   MI | 14892710 / R: 1348   ->1346     |     |B    |B    |W    |W    |B    |W    |W    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '             |3.0  |W  59|L  17|W  58|L  20|X    |U    |U    |\\r\\n   MI | 15761443 / R: 1403P5 ->1341P9   |     |B    |W    |B    |W    |     |     |     |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                       |3.0  |L  12|L  50|L  57|D  60|D  61|W  64|W  56|\\r\\n   MI | 14462326 / R: 1332   ->1256     |     |B    |W    |B    |B    |W    |W    |B    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '               |3.0  |L  21|L  23|L  24|W  63|W  59|L  46|W  55|\\r\\n   MI | 14101068 / R: 1283   ->1244     |     |W    |B    |W    |W    |B    |B    |W    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '              |3.0  |B    |L  14|L  32|W  53|L  39|L  24|W  59|\\r\\n   MI | 15323504 / R: 1199   ->1199     |     |     |W    |B    |B    |W    |B    |W    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                      |3.0  |L   5|L  51|D  60|L  56|W  63|D  55|W  58|\\r\\n   MI | 15372807 / R: 1242   ->1191     |     |W    |B    |W    |B    |W    |B    |W    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '        |3.0  |W  35|L   7|L  27|L  50|W  64|W  43|L  23|\\r\\n   MI | 15490981 / R:  377P3 ->1076P10  |     |B    |W    |B    |W    |B    |W    |W    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                    |2.5  |L  18|W  24|L  21|W  61|L   8|D  51|L  25|\\r\\n   MI | 12533115 / R: 1362   ->1341     |     |W    |B    |W    |B    |W    |B    |W    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                   |2.5  |L  17|W  63|H    |D  52|H    |L  29|L  35|\\r\\n   MI | 14369165 / R: 1382   ->1335     |     |B    |W    |     |B    |     |W    |B    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                |2.5  |L  26|L  20|D  63|D  64|W  58|H    |U    |\\r\\n   MI | 12531685 / R: 1291P12->1259P17  |     |W    |W    |B    |W    |B    |     |     |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                     |2.5  |L  29|W  42|L  33|W  46|H    |L  31|L  30|\\r\\n   MI | 14773178 / R: 1056   ->1111     |     |W    |B    |W    |B    |     |B    |W    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                 |2.5  |L  27|W  45|L  36|W  57|L  32|D  47|L  33|\\r\\n   MI | 15205474 / R: 1011   ->1097     |     |B    |W    |B    |W    |B    |W    |W    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                      |2.5  |W  30|D  22|L  19|D  48|L  29|D  35|L  34|\\r\\n   MI | 14918803 / R:  935   ->1092     |N:4  |B    |W    |B    |W    |B    |W    |B    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                   |2.0  |H    |L  25|H    |L  44|U    |W  57|U    |\\r\\n   MI | 12578849 / R: 1393   ->1359     |     |     |B    |     |W    |     |W    |     |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                    |2.0  |L  14|L  39|L  61|B    |L  15|L  59|W  64|\\r\\n   MI | 12836773 / R: 1270   ->1200     |     |B    |B    |W    |     |W    |B    |W    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                      |2.0  |L  62|D  31|L  10|L  30|B    |D  45|L  43|\\r\\n   MI | 15412571 / R: 1186   ->1163     |     |W    |B    |W    |B    |     |W    |B    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                   |2.0  |H    |L  11|L  35|W  45|H    |L  40|L  42|\\r\\n   MI | 14679887 / R: 1153   ->1140     |     |     |B    |W    |W    |     |B    |W    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                     |2.0  |L   7|L  36|W  42|L  51|L  35|L  53|B    |\\r\\n   MI | 15113330 / R: 1092   ->1079     |     |B    |W    |W    |B    |W    |B    |     |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                   |2.0  |W  31|L   2|L  41|L  23|L  49|B    |L  45|\\r\\n   MI | 14700365 / R:  917   -> 941     |     |W    |B    |W    |B    |W    |     |B    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " ' CORMICK               |2.0  |L  41|B    |L   9|L  40|L  43|W  54|L  44|\\r\\n   MI | 12841036 / R:  853   -> 878     |     |W    |     |B    |B    |W    |W    |B    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                     |1.5  |L  33|L  34|D  45|D  42|L  24|H    |U    |\\r\\n   MI | 14579262 / R:  967   -> 984     |     |W    |B    |B    |W    |B    |     |     |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                  |1.5  |L  32|L   3|W  54|L  47|D  42|L  30|L  37|\\r\\n   ON | 15771592 / R:  955P11-> 979P18  |     |B    |W    |B    |W    |B    |W    |B    |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                  |1.0  |W  55|U    |U    |U    |U    |U    |U    |\\r\\n   MI | 15219542 / R: 1530   ->1535     |     |B    |     |     |     |     |     |     |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '            |1.0  |L   2|L  48|D  49|L  43|L  45|H    |U    |\\r\\n   MI | 15057092 / R: 1175   ->1125     |     |W    |B    |W    |B    |B    |     |     |\\r\\n-----------------------------------------------------------------------------------------\\r\\n   ',\n",
       " '                         |1.0  |L  22|D  30|L  31|D  49|L  46|L  42|L  54|\\r\\n   MI | 15006561 / R: 1163   ->1112     |     |B    |W    |W    |B    |W    |B    |B    |\\r\\n-----------------------------------------------------------------------------------------']"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 14;\n",
       "                var nbb_unformatted_code = \"info = re.split(r\\\"[0-9]+\\\\s[|]\\\\s[\\\\w]+\\\\s[\\\\w]+\\\\s[\\\\w]*\\\", contents)[1:]\\ninfo\";\n",
       "                var nbb_formatted_code = \"info = re.split(r\\\"[0-9]+\\\\s[|]\\\\s[\\\\w]+\\\\s[\\\\w]+\\\\s[\\\\w]*\\\", contents)[1:]\\ninfo\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "info = re.split(r\"[0-9]+\\s[|]\\s[\\w]+\\s[\\w]+\\s[\\w]*\", contents)[1:]\n",
    "info"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5556a436",
   "metadata": {},
   "source": [
    "### Base on Info we get before, use regex to extract opponent id of each players, and then replace the unnecessary content (here is '|') with space."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "784cf3fc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['39|', '21|', '18|', '14|', '7|', '12|', '4|'],\n",
       " ['63|', '58|', '4|', '17|', '16|', '20|', '7|'],\n",
       " ['8|', '61|', '25|', '21|', '11|', '13|', '12|'],\n",
       " ['23|', '28|', '2|', '26|', '5|', '19|', '1|'],\n",
       " ['45|', '37|', '12|', '13|', '4|', '14|', '17|'],\n",
       " ['34|', '29|', '11|', '35|', '10|', '27|', '21|'],\n",
       " ['57|', '46|', '13|', '11|', '1|', '9|', '2|'],\n",
       " ['3|', '32|', '14|', '9|', '47|', '28|', '19|'],\n",
       " ['25|', '18|', '59|', '8|', '26|', '7|', '20|'],\n",
       " ['16|', '19|', '55|', '31|', '6|', '25|', '18|'],\n",
       " ['38|', '56|', '6|', '7|', '3|', '34|', '26|'],\n",
       " ['42|', '33|', '5|', '38|', '1|', '3|'],\n",
       " ['36|', '27|', '7|', '5|', '33|', '3|', '32|'],\n",
       " ['54|', '44|', '8|', '1|', '27|', '5|', '31|'],\n",
       " ['19|', '16|', '30|', '22|', '54|', '33|', '38|'],\n",
       " ['10|', '15|', '39|', '2|', '36|'],\n",
       " ['48|', '41|', '26|', '2|', '23|', '22|', '5|'],\n",
       " ['47|', '9|', '1|', '32|', '19|', '38|', '10|'],\n",
       " ['15|', '10|', '52|', '28|', '18|', '4|', '8|'],\n",
       " ['40|', '49|', '23|', '41|', '28|', '2|', '9|'],\n",
       " ['43|', '1|', '47|', '3|', '40|', '39|', '6|'],\n",
       " ['64|', '52|', '28|', '15|', '17|', '40|'],\n",
       " ['4|', '43|', '20|', '58|', '17|', '37|', '46|'],\n",
       " ['28|', '47|', '43|', '25|', '60|', '44|', '39|'],\n",
       " ['9|', '53|', '3|', '24|', '34|', '10|', '47|'],\n",
       " ['49|', '40|', '17|', '4|', '9|', '32|', '11|'],\n",
       " ['51|', '13|', '46|', '37|', '14|', '6|'],\n",
       " ['24|', '4|', '22|', '19|', '20|', '8|', '36|'],\n",
       " ['50|', '6|', '38|', '34|', '52|', '48|'],\n",
       " ['52|', '64|', '15|', '55|', '31|', '61|', '50|'],\n",
       " ['58|', '55|', '64|', '10|', '30|', '50|', '14|'],\n",
       " ['61|', '8|', '44|', '18|', '51|', '26|', '13|'],\n",
       " ['60|', '12|', '50|', '36|', '13|', '15|', '51|'],\n",
       " ['6|', '60|', '37|', '29|', '25|', '11|', '52|'],\n",
       " ['46|', '38|', '56|', '6|', '57|', '52|', '48|'],\n",
       " ['13|', '57|', '51|', '33|', '16|', '28|'],\n",
       " ['5|', '34|', '27|', '23|', '61|'],\n",
       " ['11|', '35|', '29|', '12|', '18|', '15|'],\n",
       " ['1|', '54|', '40|', '16|', '44|', '21|', '24|'],\n",
       " ['20|', '26|', '39|', '59|', '21|', '56|', '22|'],\n",
       " ['59|', '17|', '58|', '20|'],\n",
       " ['12|', '50|', '57|', '60|', '61|', '64|', '56|'],\n",
       " ['21|', '23|', '24|', '63|', '59|', '46|', '55|'],\n",
       " ['14|', '32|', '53|', '39|', '24|', '59|'],\n",
       " ['5|', '51|', '60|', '56|', '63|', '55|', '58|'],\n",
       " ['35|', '7|', '27|', '50|', '64|', '43|', '23|'],\n",
       " ['18|', '24|', '21|', '61|', '8|', '51|', '25|'],\n",
       " ['17|', '63|', '52|', '29|', '35|'],\n",
       " ['26|', '20|', '63|', '64|', '58|'],\n",
       " ['29|', '42|', '33|', '46|', '31|', '30|'],\n",
       " ['27|', '45|', '36|', '57|', '32|', '47|', '33|'],\n",
       " ['30|', '22|', '19|', '48|', '29|', '35|', '34|'],\n",
       " ['25|', '44|', '57|'],\n",
       " ['14|', '39|', '61|', '15|', '59|', '64|'],\n",
       " ['62|', '31|', '10|', '30|', '45|', '43|'],\n",
       " ['11|', '35|', '45|', '40|', '42|'],\n",
       " ['7|', '36|', '42|', '51|', '35|', '53|'],\n",
       " ['31|', '2|', '41|', '23|', '49|', '45|'],\n",
       " ['41|', '9|', '40|', '43|', '54|', '44|'],\n",
       " ['33|', '34|', '45|', '42|', '24|'],\n",
       " ['32|', '3|', '54|', '47|', '42|', '30|', '37|'],\n",
       " ['55|'],\n",
       " ['2|', '48|', '49|', '43|', '45|'],\n",
       " ['22|', '30|', '31|', '49|', '46|', '42|', '54|']]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 16;\n",
       "                var nbb_unformatted_code = \"temp = []\\nfor i in range(0, len(info)):\\n    temp.append(re.findall(\\\"[0-9]{1,2}[|]\\\", info[i]))\\ntemp\";\n",
       "                var nbb_formatted_code = \"temp = []\\nfor i in range(0, len(info)):\\n    temp.append(re.findall(\\\"[0-9]{1,2}[|]\\\", info[i]))\\ntemp\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "temp = []\n",
    "for i in range(0, len(info)):\n",
    "    temp.append(re.findall(\"[0-9]{1,2}[|]\", info[i]))\n",
    "temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "58884858",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['39', '21', '18', '14', '7', '12', '4'],\n",
       " ['63', '58', '4', '17', '16', '20', '7'],\n",
       " ['8', '61', '25', '21', '11', '13', '12'],\n",
       " ['23', '28', '2', '26', '5', '19', '1'],\n",
       " ['45', '37', '12', '13', '4', '14', '17'],\n",
       " ['34', '29', '11', '35', '10', '27', '21'],\n",
       " ['57', '46', '13', '11', '1', '9', '2'],\n",
       " ['3', '32', '14', '9', '47', '28', '19'],\n",
       " ['25', '18', '59', '8', '26', '7', '20'],\n",
       " ['16', '19', '55', '31', '6', '25', '18'],\n",
       " ['38', '56', '6', '7', '3', '34', '26'],\n",
       " ['42', '33', '5', '38', '1', '3'],\n",
       " ['36', '27', '7', '5', '33', '3', '32'],\n",
       " ['54', '44', '8', '1', '27', '5', '31'],\n",
       " ['19', '16', '30', '22', '54', '33', '38'],\n",
       " ['10', '15', '39', '2', '36'],\n",
       " ['48', '41', '26', '2', '23', '22', '5'],\n",
       " ['47', '9', '1', '32', '19', '38', '10'],\n",
       " ['15', '10', '52', '28', '18', '4', '8'],\n",
       " ['40', '49', '23', '41', '28', '2', '9'],\n",
       " ['43', '1', '47', '3', '40', '39', '6'],\n",
       " ['64', '52', '28', '15', '17', '40'],\n",
       " ['4', '43', '20', '58', '17', '37', '46'],\n",
       " ['28', '47', '43', '25', '60', '44', '39'],\n",
       " ['9', '53', '3', '24', '34', '10', '47'],\n",
       " ['49', '40', '17', '4', '9', '32', '11'],\n",
       " ['51', '13', '46', '37', '14', '6'],\n",
       " ['24', '4', '22', '19', '20', '8', '36'],\n",
       " ['50', '6', '38', '34', '52', '48'],\n",
       " ['52', '64', '15', '55', '31', '61', '50'],\n",
       " ['58', '55', '64', '10', '30', '50', '14'],\n",
       " ['61', '8', '44', '18', '51', '26', '13'],\n",
       " ['60', '12', '50', '36', '13', '15', '51'],\n",
       " ['6', '60', '37', '29', '25', '11', '52'],\n",
       " ['46', '38', '56', '6', '57', '52', '48'],\n",
       " ['13', '57', '51', '33', '16', '28'],\n",
       " ['5', '34', '27', '23', '61'],\n",
       " ['11', '35', '29', '12', '18', '15'],\n",
       " ['1', '54', '40', '16', '44', '21', '24'],\n",
       " ['20', '26', '39', '59', '21', '56', '22'],\n",
       " ['59', '17', '58', '20'],\n",
       " ['12', '50', '57', '60', '61', '64', '56'],\n",
       " ['21', '23', '24', '63', '59', '46', '55'],\n",
       " ['14', '32', '53', '39', '24', '59'],\n",
       " ['5', '51', '60', '56', '63', '55', '58'],\n",
       " ['35', '7', '27', '50', '64', '43', '23'],\n",
       " ['18', '24', '21', '61', '8', '51', '25'],\n",
       " ['17', '63', '52', '29', '35'],\n",
       " ['26', '20', '63', '64', '58'],\n",
       " ['29', '42', '33', '46', '31', '30'],\n",
       " ['27', '45', '36', '57', '32', '47', '33'],\n",
       " ['30', '22', '19', '48', '29', '35', '34'],\n",
       " ['25', '44', '57'],\n",
       " ['14', '39', '61', '15', '59', '64'],\n",
       " ['62', '31', '10', '30', '45', '43'],\n",
       " ['11', '35', '45', '40', '42'],\n",
       " ['7', '36', '42', '51', '35', '53'],\n",
       " ['31', '2', '41', '23', '49', '45'],\n",
       " ['41', '9', '40', '43', '54', '44'],\n",
       " ['33', '34', '45', '42', '24'],\n",
       " ['32', '3', '54', '47', '42', '30', '37'],\n",
       " ['55'],\n",
       " ['2', '48', '49', '43', '45'],\n",
       " ['22', '30', '31', '49', '46', '42', '54']]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 17;\n",
       "                var nbb_unformatted_code = \"oppo_id = []\\nfor i in range(0, len(temp)):\\n    oppo_id_row = list(map(lambda x: x.replace(\\\"|\\\", \\\"\\\"), temp[i]))\\n    oppo_id.append(oppo_id_row)\\noppo_id\";\n",
       "                var nbb_formatted_code = \"oppo_id = []\\nfor i in range(0, len(temp)):\\n    oppo_id_row = list(map(lambda x: x.replace(\\\"|\\\", \\\"\\\"), temp[i]))\\n    oppo_id.append(oppo_id_row)\\noppo_id\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "oppo_id = []\n",
    "for i in range(0, len(temp)):\n",
    "    oppo_id_row = list(map(lambda x: x.replace(\"|\", \"\"), temp[i]))\n",
    "    oppo_id.append(oppo_id_row)\n",
    "oppo_id"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3fbd8301",
   "metadata": {},
   "source": [
    "### Convert above list from string to numeric data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "17c61e8d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 18;\n",
       "                var nbb_unformatted_code = \"oppo_id_final = []\\nfor i in range(0, len(oppo_id)):\\n    res = [eval(i) for i in oppo_id[i]]\\n    oppo_id_final.append(res)\";\n",
       "                var nbb_formatted_code = \"oppo_id_final = []\\nfor i in range(0, len(oppo_id)):\\n    res = [eval(i) for i in oppo_id[i]]\\n    oppo_id_final.append(res)\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "oppo_id_final = []\n",
    "for i in range(0, len(oppo_id)):\n",
    "    res = [eval(i) for i in oppo_id[i]]\n",
    "    oppo_id_final.append(res)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0907b381",
   "metadata": {},
   "source": [
    "### Convert the above list of list to dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "92bb01df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>oppo1</th>\n",
       "      <th>oppo2</th>\n",
       "      <th>oppo3</th>\n",
       "      <th>oppo4</th>\n",
       "      <th>oppo5</th>\n",
       "      <th>oppo6</th>\n",
       "      <th>oppo7</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>39</td>\n",
       "      <td>21.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>63</td>\n",
       "      <td>58.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>61.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>23</td>\n",
       "      <td>28.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>45</td>\n",
       "      <td>37.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>17.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>33</td>\n",
       "      <td>34.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>32</td>\n",
       "      <td>3.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>55</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>2</td>\n",
       "      <td>48.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>22</td>\n",
       "      <td>30.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>54.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>64 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    oppo1  oppo2  oppo3  oppo4  oppo5  oppo6  oppo7\n",
       "0      39   21.0   18.0   14.0    7.0   12.0    4.0\n",
       "1      63   58.0    4.0   17.0   16.0   20.0    7.0\n",
       "2       8   61.0   25.0   21.0   11.0   13.0   12.0\n",
       "3      23   28.0    2.0   26.0    5.0   19.0    1.0\n",
       "4      45   37.0   12.0   13.0    4.0   14.0   17.0\n",
       "..    ...    ...    ...    ...    ...    ...    ...\n",
       "59     33   34.0   45.0   42.0   24.0    NaN    NaN\n",
       "60     32    3.0   54.0   47.0   42.0   30.0   37.0\n",
       "61     55    NaN    NaN    NaN    NaN    NaN    NaN\n",
       "62      2   48.0   49.0   43.0   45.0    NaN    NaN\n",
       "63     22   30.0   31.0   49.0   46.0   42.0   54.0\n",
       "\n",
       "[64 rows x 7 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 19;\n",
       "                var nbb_unformatted_code = \"oppo_df = pd.DataFrame(\\n    oppo_id_final,\\n    columns=[\\\"oppo1\\\", \\\"oppo2\\\", \\\"oppo3\\\", \\\"oppo4\\\", \\\"oppo5\\\", \\\"oppo6\\\", \\\"oppo7\\\"],\\n)\\noppo_df\";\n",
       "                var nbb_formatted_code = \"oppo_df = pd.DataFrame(\\n    oppo_id_final,\\n    columns=[\\\"oppo1\\\", \\\"oppo2\\\", \\\"oppo3\\\", \\\"oppo4\\\", \\\"oppo5\\\", \\\"oppo6\\\", \\\"oppo7\\\"],\\n)\\noppo_df\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "oppo_df = pd.DataFrame(\n",
    "    oppo_id_final,\n",
    "    columns=[\"oppo1\", \"oppo2\", \"oppo3\", \"oppo4\", \"oppo5\", \"oppo6\", \"oppo7\"],\n",
    ")\n",
    "oppo_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "01c2c26f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 64 entries, 0 to 63\n",
      "Data columns (total 7 columns):\n",
      " #   Column  Non-Null Count  Dtype  \n",
      "---  ------  --------------  -----  \n",
      " 0   oppo1   64 non-null     int64  \n",
      " 1   oppo2   63 non-null     float64\n",
      " 2   oppo3   63 non-null     float64\n",
      " 3   oppo4   62 non-null     float64\n",
      " 4   oppo5   61 non-null     float64\n",
      " 5   oppo6   54 non-null     float64\n",
      " 6   oppo7   41 non-null     float64\n",
      "dtypes: float64(6), int64(1)\n",
      "memory usage: 3.6 KB\n"
     ]
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 20;\n",
       "                var nbb_unformatted_code = \"oppo_df.info()\";\n",
       "                var nbb_formatted_code = \"oppo_df.info()\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "oppo_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "1aaa2edf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "oppo1     0\n",
       "oppo2     1\n",
       "oppo3     1\n",
       "oppo4     2\n",
       "oppo5     3\n",
       "oppo6    10\n",
       "oppo7    23\n",
       "dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 21;\n",
       "                var nbb_unformatted_code = \"oppo_df.isna().sum()\";\n",
       "                var nbb_formatted_code = \"oppo_df.isna().sum()\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "oppo_df.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7472f94e",
   "metadata": {},
   "source": [
    "* Column 'oppo1' is the only column that doesn't have any missing values, so that's the reason why the data type of this column's data is \"int\"."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17c6a081",
   "metadata": {},
   "source": [
    "### Merge two DataFrames (df that contains the pair_num,name,state etc, and df that contains the information of pair_num of each opponent) by index with pandas.merge()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "91c453be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pair_num</th>\n",
       "      <th>name</th>\n",
       "      <th>total points</th>\n",
       "      <th>state</th>\n",
       "      <th>pre rating</th>\n",
       "      <th>oppo1</th>\n",
       "      <th>oppo2</th>\n",
       "      <th>oppo3</th>\n",
       "      <th>oppo4</th>\n",
       "      <th>oppo5</th>\n",
       "      <th>oppo6</th>\n",
       "      <th>oppo7</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>GARY HUA</td>\n",
       "      <td>6.0</td>\n",
       "      <td>ON</td>\n",
       "      <td>1794</td>\n",
       "      <td>39</td>\n",
       "      <td>21.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>DAKSHESH DARURI</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1553</td>\n",
       "      <td>63</td>\n",
       "      <td>58.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>ADITYA BAJAJ</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1384</td>\n",
       "      <td>8</td>\n",
       "      <td>61.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>PATRICK H SCHILLING</td>\n",
       "      <td>5.5</td>\n",
       "      <td>MI</td>\n",
       "      <td>1716</td>\n",
       "      <td>23</td>\n",
       "      <td>28.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>HANSHI ZUO</td>\n",
       "      <td>5.5</td>\n",
       "      <td>MI</td>\n",
       "      <td>1655</td>\n",
       "      <td>45</td>\n",
       "      <td>37.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>17.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>60</td>\n",
       "      <td>JULIA SHEN</td>\n",
       "      <td>1.5</td>\n",
       "      <td>MI</td>\n",
       "      <td>967</td>\n",
       "      <td>33</td>\n",
       "      <td>34.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>61</td>\n",
       "      <td>JEZZEL FARKAS</td>\n",
       "      <td>1.5</td>\n",
       "      <td>ON</td>\n",
       "      <td>955</td>\n",
       "      <td>32</td>\n",
       "      <td>3.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>62</td>\n",
       "      <td>ASHWIN BALAJI</td>\n",
       "      <td>1.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1530</td>\n",
       "      <td>55</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>63</td>\n",
       "      <td>THOMAS JOSEPH HOSMER</td>\n",
       "      <td>1.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1175</td>\n",
       "      <td>2</td>\n",
       "      <td>48.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>64</td>\n",
       "      <td>BEN LI</td>\n",
       "      <td>1.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1163</td>\n",
       "      <td>22</td>\n",
       "      <td>30.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>54.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>64 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   pair_num                  name total points state pre rating  oppo1  oppo2  \\\n",
       "0         1             GARY HUA           6.0    ON       1794     39   21.0   \n",
       "1         2      DAKSHESH DARURI           6.0    MI       1553     63   58.0   \n",
       "2         3         ADITYA BAJAJ           6.0    MI       1384      8   61.0   \n",
       "3         4   PATRICK H SCHILLING          5.5    MI       1716     23   28.0   \n",
       "4         5           HANSHI ZUO           5.5    MI       1655     45   37.0   \n",
       "..      ...                   ...          ...   ...        ...    ...    ...   \n",
       "59       60           JULIA SHEN           1.5    MI        967     33   34.0   \n",
       "60       61        JEZZEL FARKAS           1.5    ON        955     32    3.0   \n",
       "61       62        ASHWIN BALAJI           1.0    MI       1530     55    NaN   \n",
       "62       63  THOMAS JOSEPH HOSMER          1.0    MI       1175      2   48.0   \n",
       "63       64               BEN LI           1.0    MI       1163     22   30.0   \n",
       "\n",
       "    oppo3  oppo4  oppo5  oppo6  oppo7  \n",
       "0    18.0   14.0    7.0   12.0    4.0  \n",
       "1     4.0   17.0   16.0   20.0    7.0  \n",
       "2    25.0   21.0   11.0   13.0   12.0  \n",
       "3     2.0   26.0    5.0   19.0    1.0  \n",
       "4    12.0   13.0    4.0   14.0   17.0  \n",
       "..    ...    ...    ...    ...    ...  \n",
       "59   45.0   42.0   24.0    NaN    NaN  \n",
       "60   54.0   47.0   42.0   30.0   37.0  \n",
       "61    NaN    NaN    NaN    NaN    NaN  \n",
       "62   49.0   43.0   45.0    NaN    NaN  \n",
       "63   31.0   49.0   46.0   42.0   54.0  \n",
       "\n",
       "[64 rows x 12 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 22;\n",
       "                var nbb_unformatted_code = \"df_merge = pd.merge(df, oppo_df, left_index=True, right_index=True)\\ndf_merge\";\n",
       "                var nbb_formatted_code = \"df_merge = pd.merge(df, oppo_df, left_index=True, right_index=True)\\ndf_merge\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_merge = pd.merge(df, oppo_df, left_index=True, right_index=True)\n",
    "df_merge"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7834c60c",
   "metadata": {},
   "source": [
    "### Tidy the above data from wide format to long format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "099108c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pair_num</th>\n",
       "      <th>name</th>\n",
       "      <th>total points</th>\n",
       "      <th>state</th>\n",
       "      <th>pre rating</th>\n",
       "      <th>opponent</th>\n",
       "      <th>oppo_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>GARY HUA</td>\n",
       "      <td>6.0</td>\n",
       "      <td>ON</td>\n",
       "      <td>1794</td>\n",
       "      <td>oppo1</td>\n",
       "      <td>39.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>DAKSHESH DARURI</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1553</td>\n",
       "      <td>oppo1</td>\n",
       "      <td>63.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>ADITYA BAJAJ</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1384</td>\n",
       "      <td>oppo1</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>PATRICK H SCHILLING</td>\n",
       "      <td>5.5</td>\n",
       "      <td>MI</td>\n",
       "      <td>1716</td>\n",
       "      <td>oppo1</td>\n",
       "      <td>23.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>HANSHI ZUO</td>\n",
       "      <td>5.5</td>\n",
       "      <td>MI</td>\n",
       "      <td>1655</td>\n",
       "      <td>oppo1</td>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>443</th>\n",
       "      <td>60</td>\n",
       "      <td>JULIA SHEN</td>\n",
       "      <td>1.5</td>\n",
       "      <td>MI</td>\n",
       "      <td>967</td>\n",
       "      <td>oppo7</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>444</th>\n",
       "      <td>61</td>\n",
       "      <td>JEZZEL FARKAS</td>\n",
       "      <td>1.5</td>\n",
       "      <td>ON</td>\n",
       "      <td>955</td>\n",
       "      <td>oppo7</td>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>445</th>\n",
       "      <td>62</td>\n",
       "      <td>ASHWIN BALAJI</td>\n",
       "      <td>1.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1530</td>\n",
       "      <td>oppo7</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>446</th>\n",
       "      <td>63</td>\n",
       "      <td>THOMAS JOSEPH HOSMER</td>\n",
       "      <td>1.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1175</td>\n",
       "      <td>oppo7</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>447</th>\n",
       "      <td>64</td>\n",
       "      <td>BEN LI</td>\n",
       "      <td>1.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1163</td>\n",
       "      <td>oppo7</td>\n",
       "      <td>54.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>448 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    pair_num                  name total points state pre rating opponent  \\\n",
       "0          1             GARY HUA           6.0    ON       1794    oppo1   \n",
       "1          2      DAKSHESH DARURI           6.0    MI       1553    oppo1   \n",
       "2          3         ADITYA BAJAJ           6.0    MI       1384    oppo1   \n",
       "3          4   PATRICK H SCHILLING          5.5    MI       1716    oppo1   \n",
       "4          5           HANSHI ZUO           5.5    MI       1655    oppo1   \n",
       "..       ...                   ...          ...   ...        ...      ...   \n",
       "443       60           JULIA SHEN           1.5    MI        967    oppo7   \n",
       "444       61        JEZZEL FARKAS           1.5    ON        955    oppo7   \n",
       "445       62        ASHWIN BALAJI           1.0    MI       1530    oppo7   \n",
       "446       63  THOMAS JOSEPH HOSMER          1.0    MI       1175    oppo7   \n",
       "447       64               BEN LI           1.0    MI       1163    oppo7   \n",
       "\n",
       "     oppo_id  \n",
       "0       39.0  \n",
       "1       63.0  \n",
       "2        8.0  \n",
       "3       23.0  \n",
       "4       45.0  \n",
       "..       ...  \n",
       "443      NaN  \n",
       "444     37.0  \n",
       "445      NaN  \n",
       "446      NaN  \n",
       "447     54.0  \n",
       "\n",
       "[448 rows x 7 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 23;\n",
       "                var nbb_unformatted_code = \"df_long = df_merge.melt(\\n    id_vars=[\\\"pair_num\\\", \\\"name\\\", \\\"total points\\\", \\\"state\\\", \\\"pre rating\\\"],\\n    value_vars=[\\\"oppo1\\\", \\\"oppo2\\\", \\\"oppo3\\\", \\\"oppo4\\\", \\\"oppo5\\\", \\\"oppo6\\\", \\\"oppo7\\\"],\\n)\\ndf_long.rename(columns={\\\"variable\\\": \\\"opponent\\\", \\\"value\\\": \\\"oppo_id\\\"}, inplace=True)\\ndf_long\";\n",
       "                var nbb_formatted_code = \"df_long = df_merge.melt(\\n    id_vars=[\\\"pair_num\\\", \\\"name\\\", \\\"total points\\\", \\\"state\\\", \\\"pre rating\\\"],\\n    value_vars=[\\\"oppo1\\\", \\\"oppo2\\\", \\\"oppo3\\\", \\\"oppo4\\\", \\\"oppo5\\\", \\\"oppo6\\\", \\\"oppo7\\\"],\\n)\\ndf_long.rename(columns={\\\"variable\\\": \\\"opponent\\\", \\\"value\\\": \\\"oppo_id\\\"}, inplace=True)\\ndf_long\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_long = df_merge.melt(\n",
    "    id_vars=[\"pair_num\", \"name\", \"total points\", \"state\", \"pre rating\"],\n",
    "    value_vars=[\"oppo1\", \"oppo2\", \"oppo3\", \"oppo4\", \"oppo5\", \"oppo6\", \"oppo7\"],\n",
    ")\n",
    "df_long.rename(columns={\"variable\": \"opponent\", \"value\": \"oppo_id\"}, inplace=True)\n",
    "df_long"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0fa7256",
   "metadata": {},
   "source": [
    "### We don't want to calculate the rating if the player didn't have a opponent in the certain round, so we can just drop the rows that contain the missing value that in the oppo_id column, which means we delete the round that player didn't play."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "4ac1ddd4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pair_num</th>\n",
       "      <th>name</th>\n",
       "      <th>total points</th>\n",
       "      <th>state</th>\n",
       "      <th>pre rating</th>\n",
       "      <th>opponent</th>\n",
       "      <th>oppo_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>GARY HUA</td>\n",
       "      <td>6.0</td>\n",
       "      <td>ON</td>\n",
       "      <td>1794</td>\n",
       "      <td>oppo1</td>\n",
       "      <td>39.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>DAKSHESH DARURI</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1553</td>\n",
       "      <td>oppo1</td>\n",
       "      <td>63.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>ADITYA BAJAJ</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1384</td>\n",
       "      <td>oppo1</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>PATRICK H SCHILLING</td>\n",
       "      <td>5.5</td>\n",
       "      <td>MI</td>\n",
       "      <td>1716</td>\n",
       "      <td>oppo1</td>\n",
       "      <td>23.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>HANSHI ZUO</td>\n",
       "      <td>5.5</td>\n",
       "      <td>MI</td>\n",
       "      <td>1655</td>\n",
       "      <td>oppo1</td>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>430</th>\n",
       "      <td>47</td>\n",
       "      <td>ERIC WRIGHT</td>\n",
       "      <td>2.5</td>\n",
       "      <td>MI</td>\n",
       "      <td>1362</td>\n",
       "      <td>oppo7</td>\n",
       "      <td>25.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>434</th>\n",
       "      <td>51</td>\n",
       "      <td>TEJAS AYYAGARI</td>\n",
       "      <td>2.5</td>\n",
       "      <td>MI</td>\n",
       "      <td>1011</td>\n",
       "      <td>oppo7</td>\n",
       "      <td>33.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>435</th>\n",
       "      <td>52</td>\n",
       "      <td>ETHAN GUO</td>\n",
       "      <td>2.5</td>\n",
       "      <td>MI</td>\n",
       "      <td>935</td>\n",
       "      <td>oppo7</td>\n",
       "      <td>34.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>444</th>\n",
       "      <td>61</td>\n",
       "      <td>JEZZEL FARKAS</td>\n",
       "      <td>1.5</td>\n",
       "      <td>ON</td>\n",
       "      <td>955</td>\n",
       "      <td>oppo7</td>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>447</th>\n",
       "      <td>64</td>\n",
       "      <td>BEN LI</td>\n",
       "      <td>1.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1163</td>\n",
       "      <td>oppo7</td>\n",
       "      <td>54.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>408 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    pair_num                 name total points state pre rating opponent  \\\n",
       "0          1            GARY HUA           6.0    ON       1794    oppo1   \n",
       "1          2     DAKSHESH DARURI           6.0    MI       1553    oppo1   \n",
       "2          3        ADITYA BAJAJ           6.0    MI       1384    oppo1   \n",
       "3          4  PATRICK H SCHILLING          5.5    MI       1716    oppo1   \n",
       "4          5          HANSHI ZUO           5.5    MI       1655    oppo1   \n",
       "..       ...                  ...          ...   ...        ...      ...   \n",
       "430       47         ERIC WRIGHT           2.5    MI       1362    oppo7   \n",
       "434       51      TEJAS AYYAGARI           2.5    MI       1011    oppo7   \n",
       "435       52           ETHAN GUO           2.5    MI        935    oppo7   \n",
       "444       61       JEZZEL FARKAS           1.5    ON        955    oppo7   \n",
       "447       64              BEN LI           1.0    MI       1163    oppo7   \n",
       "\n",
       "     oppo_id  \n",
       "0       39.0  \n",
       "1       63.0  \n",
       "2        8.0  \n",
       "3       23.0  \n",
       "4       45.0  \n",
       "..       ...  \n",
       "430     25.0  \n",
       "434     33.0  \n",
       "435     34.0  \n",
       "444     37.0  \n",
       "447     54.0  \n",
       "\n",
       "[408 rows x 7 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 24;\n",
       "                var nbb_unformatted_code = \"df_long = df_long.dropna()\\ndf_long\";\n",
       "                var nbb_formatted_code = \"df_long = df_long.dropna()\\ndf_long\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_long = df_long.dropna()\n",
    "df_long"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3ce887c",
   "metadata": {},
   "source": [
    "* Check the df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d61f1df2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pair_num</th>\n",
       "      <th>name</th>\n",
       "      <th>total points</th>\n",
       "      <th>state</th>\n",
       "      <th>pre rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>GARY HUA</td>\n",
       "      <td>6.0</td>\n",
       "      <td>ON</td>\n",
       "      <td>1794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>DAKSHESH DARURI</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>ADITYA BAJAJ</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1384</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>PATRICK H SCHILLING</td>\n",
       "      <td>5.5</td>\n",
       "      <td>MI</td>\n",
       "      <td>1716</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>HANSHI ZUO</td>\n",
       "      <td>5.5</td>\n",
       "      <td>MI</td>\n",
       "      <td>1655</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>60</td>\n",
       "      <td>JULIA SHEN</td>\n",
       "      <td>1.5</td>\n",
       "      <td>MI</td>\n",
       "      <td>967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>61</td>\n",
       "      <td>JEZZEL FARKAS</td>\n",
       "      <td>1.5</td>\n",
       "      <td>ON</td>\n",
       "      <td>955</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>62</td>\n",
       "      <td>ASHWIN BALAJI</td>\n",
       "      <td>1.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>63</td>\n",
       "      <td>THOMAS JOSEPH HOSMER</td>\n",
       "      <td>1.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>64</td>\n",
       "      <td>BEN LI</td>\n",
       "      <td>1.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1163</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>64 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   pair_num                  name total points state pre rating\n",
       "0         1             GARY HUA           6.0    ON       1794\n",
       "1         2      DAKSHESH DARURI           6.0    MI       1553\n",
       "2         3         ADITYA BAJAJ           6.0    MI       1384\n",
       "3         4   PATRICK H SCHILLING          5.5    MI       1716\n",
       "4         5           HANSHI ZUO           5.5    MI       1655\n",
       "..      ...                   ...          ...   ...        ...\n",
       "59       60           JULIA SHEN           1.5    MI        967\n",
       "60       61        JEZZEL FARKAS           1.5    ON        955\n",
       "61       62        ASHWIN BALAJI           1.0    MI       1530\n",
       "62       63  THOMAS JOSEPH HOSMER          1.0    MI       1175\n",
       "63       64               BEN LI           1.0    MI       1163\n",
       "\n",
       "[64 rows x 5 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 25;\n",
       "                var nbb_unformatted_code = \"df\";\n",
       "                var nbb_formatted_code = \"df\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "213a7a63",
   "metadata": {},
   "source": [
    "### Select the columns that we want (pair num, pre rating) to use in the future from the dataframe that contains the player num, name, total points etc. We want to use pair num as the key to merge with another df we created before, and add pre rating column to the new merged dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "db1f3669",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>oppo_num</th>\n",
       "      <th>oppo_pre_rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1384</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1716</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>1655</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>60</td>\n",
       "      <td>967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>61</td>\n",
       "      <td>955</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>62</td>\n",
       "      <td>1530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>63</td>\n",
       "      <td>1175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>64</td>\n",
       "      <td>1163</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>64 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   oppo_num oppo_pre_rating\n",
       "0         1            1794\n",
       "1         2            1553\n",
       "2         3            1384\n",
       "3         4            1716\n",
       "4         5            1655\n",
       "..      ...             ...\n",
       "59       60             967\n",
       "60       61             955\n",
       "61       62            1530\n",
       "62       63            1175\n",
       "63       64            1163\n",
       "\n",
       "[64 rows x 2 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 26;\n",
       "                var nbb_unformatted_code = \"df_oppo_pre_rating = df[[\\\"pair_num\\\", \\\"pre rating\\\"]]\\ndf_oppo_pre_rating = df_oppo_pre_rating.rename(\\n    columns={\\\"pre rating\\\": \\\"oppo_pre_rating\\\", \\\"pair_num\\\": \\\"oppo_num\\\"}\\n)\\ndf_oppo_pre_rating\";\n",
       "                var nbb_formatted_code = \"df_oppo_pre_rating = df[[\\\"pair_num\\\", \\\"pre rating\\\"]]\\ndf_oppo_pre_rating = df_oppo_pre_rating.rename(\\n    columns={\\\"pre rating\\\": \\\"oppo_pre_rating\\\", \\\"pair_num\\\": \\\"oppo_num\\\"}\\n)\\ndf_oppo_pre_rating\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_oppo_pre_rating = df[[\"pair_num\", \"pre rating\"]]\n",
    "df_oppo_pre_rating = df_oppo_pre_rating.rename(\n",
    "    columns={\"pre rating\": \"oppo_pre_rating\", \"pair_num\": \"oppo_num\"}\n",
    ")\n",
    "df_oppo_pre_rating"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6cb0ab5",
   "metadata": {},
   "source": [
    "### Convert the data type from object to numeric"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "2dbb4b2b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 27;\n",
       "                var nbb_unformatted_code = \"for cols in df_oppo_pre_rating.columns:\\n    df_oppo_pre_rating[cols] = df_oppo_pre_rating[cols].astype(int)\";\n",
       "                var nbb_formatted_code = \"for cols in df_oppo_pre_rating.columns:\\n    df_oppo_pre_rating[cols] = df_oppo_pre_rating[cols].astype(int)\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for cols in df_oppo_pre_rating.columns:\n",
    "    df_oppo_pre_rating[cols] = df_oppo_pre_rating[cols].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "057af603",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 28;\n",
       "                var nbb_unformatted_code = \"for cols in df_long[[\\\"pair_num\\\", \\\"total points\\\", \\\"pre rating\\\", \\\"oppo_id\\\"]]:\\n    df_long[cols] = df_long[cols].apply(pd.to_numeric, errors=\\\"coerce\\\")\";\n",
       "                var nbb_formatted_code = \"for cols in df_long[[\\\"pair_num\\\", \\\"total points\\\", \\\"pre rating\\\", \\\"oppo_id\\\"]]:\\n    df_long[cols] = df_long[cols].apply(pd.to_numeric, errors=\\\"coerce\\\")\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for cols in df_long[[\"pair_num\", \"total points\", \"pre rating\", \"oppo_id\"]]:\n",
    "    df_long[cols] = df_long[cols].apply(pd.to_numeric, errors=\"coerce\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e42f4352",
   "metadata": {},
   "source": [
    "### Add a column for the corresponding opponents with their corresponding pre rating\n",
    "### Drop the duplicated column (oppo_num & oppo_id are the same column in this dataframe)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c7988d3d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>oppo_pre_rating</th>\n",
       "      <th>pair_num</th>\n",
       "      <th>name</th>\n",
       "      <th>total points</th>\n",
       "      <th>state</th>\n",
       "      <th>pre rating</th>\n",
       "      <th>opponent</th>\n",
       "      <th>oppo_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1794</td>\n",
       "      <td>39</td>\n",
       "      <td>JOEL R HENDON</td>\n",
       "      <td>3.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1436</td>\n",
       "      <td>oppo1</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1794</td>\n",
       "      <td>21</td>\n",
       "      <td>DINH DANG BUI</td>\n",
       "      <td>4.0</td>\n",
       "      <td>ON</td>\n",
       "      <td>1563</td>\n",
       "      <td>oppo2</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1794</td>\n",
       "      <td>18</td>\n",
       "      <td>DAVID SUNDEEN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1600</td>\n",
       "      <td>oppo3</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1794</td>\n",
       "      <td>14</td>\n",
       "      <td>BRADLEY SHAW</td>\n",
       "      <td>4.5</td>\n",
       "      <td>MI</td>\n",
       "      <td>1610</td>\n",
       "      <td>oppo4</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1794</td>\n",
       "      <td>7</td>\n",
       "      <td>GARY DEE SWATHELL</td>\n",
       "      <td>5.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1649</td>\n",
       "      <td>oppo5</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>403</th>\n",
       "      <td>1163</td>\n",
       "      <td>31</td>\n",
       "      <td>RISHI SHETTY</td>\n",
       "      <td>3.5</td>\n",
       "      <td>MI</td>\n",
       "      <td>1494</td>\n",
       "      <td>oppo3</td>\n",
       "      <td>64.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>404</th>\n",
       "      <td>1163</td>\n",
       "      <td>49</td>\n",
       "      <td>MICHAEL J MARTIN</td>\n",
       "      <td>2.5</td>\n",
       "      <td>MI</td>\n",
       "      <td>1291</td>\n",
       "      <td>oppo4</td>\n",
       "      <td>64.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>405</th>\n",
       "      <td>1163</td>\n",
       "      <td>46</td>\n",
       "      <td>JACOB ALEXANDER LAVALLEY</td>\n",
       "      <td>3.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>377</td>\n",
       "      <td>oppo5</td>\n",
       "      <td>64.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>406</th>\n",
       "      <td>1163</td>\n",
       "      <td>42</td>\n",
       "      <td>JARED GE</td>\n",
       "      <td>3.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1332</td>\n",
       "      <td>oppo6</td>\n",
       "      <td>64.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>407</th>\n",
       "      <td>1163</td>\n",
       "      <td>54</td>\n",
       "      <td>LARRY HODGE</td>\n",
       "      <td>2.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1270</td>\n",
       "      <td>oppo6</td>\n",
       "      <td>64.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>408 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     oppo_pre_rating  pair_num                      name  total points state  \\\n",
       "0               1794        39             JOEL R HENDON           3.0    MI   \n",
       "1               1794        21             DINH DANG BUI           4.0    ON   \n",
       "2               1794        18            DAVID SUNDEEN            4.0    MI   \n",
       "3               1794        14             BRADLEY SHAW            4.5    MI   \n",
       "4               1794         7         GARY DEE SWATHELL           5.0    MI   \n",
       "..               ...       ...                       ...           ...   ...   \n",
       "403             1163        31             RISHI SHETTY            3.5    MI   \n",
       "404             1163        49          MICHAEL J MARTIN           2.5    MI   \n",
       "405             1163        46  JACOB ALEXANDER LAVALLEY           3.0    MI   \n",
       "406             1163        42                 JARED GE            3.0    MI   \n",
       "407             1163        54              LARRY HODGE            2.0    MI   \n",
       "\n",
       "     pre rating opponent  oppo_id  \n",
       "0          1436    oppo1      1.0  \n",
       "1          1563    oppo2      1.0  \n",
       "2          1600    oppo3      1.0  \n",
       "3          1610    oppo4      1.0  \n",
       "4          1649    oppo5      1.0  \n",
       "..          ...      ...      ...  \n",
       "403        1494    oppo3     64.0  \n",
       "404        1291    oppo4     64.0  \n",
       "405         377    oppo5     64.0  \n",
       "406        1332    oppo6     64.0  \n",
       "407        1270    oppo6     64.0  \n",
       "\n",
       "[408 rows x 8 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 29;\n",
       "                var nbb_unformatted_code = \"df_final = pd.merge(df_oppo_pre_rating, df_long, left_on=\\\"oppo_num\\\", right_on=\\\"oppo_id\\\")\\ndf_final = df_final.drop([\\\"oppo_num\\\"], axis=1)\\ndf_final\";\n",
       "                var nbb_formatted_code = \"df_final = pd.merge(df_oppo_pre_rating, df_long, left_on=\\\"oppo_num\\\", right_on=\\\"oppo_id\\\")\\ndf_final = df_final.drop([\\\"oppo_num\\\"], axis=1)\\ndf_final\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_final = pd.merge(df_oppo_pre_rating, df_long, left_on=\"oppo_num\", right_on=\"oppo_id\")\n",
    "df_final = df_final.drop([\"oppo_num\"], axis=1)\n",
    "df_final"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bcba2c42",
   "metadata": {},
   "source": [
    "### Leverage the \"groupby\" function group by each player name, and get the average pre rating for their opponents."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "4b79313a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "name\n",
       "ADITYA BAJAJ              1563.571429\n",
       "ALAN BUI                  1213.857143\n",
       "ALEX KONG                 1406.000000\n",
       "AMIYATOSH PWNANANDAM      1384.800000\n",
       "ANVIT RAO                 1554.142857\n",
       "                             ...     \n",
       "TEJAS AYYAGARI            1356.142857\n",
       "THOMAS JOSEPH HOSMER      1350.200000\n",
       "TORRANCE HENRY JR         1497.857143\n",
       "VIRAJ MOHILE              1391.000000\n",
       "ZACHARY JAMES HOUGHTON    1483.857143\n",
       "Name: oppo_pre_rating, Length: 64, dtype: float64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 30;\n",
       "                var nbb_unformatted_code = \"avg_oppo_score = df_final.groupby(by=[\\\"name\\\"])[\\\"oppo_pre_rating\\\"].mean()\\navg_oppo_score\";\n",
       "                var nbb_formatted_code = \"avg_oppo_score = df_final.groupby(by=[\\\"name\\\"])[\\\"oppo_pre_rating\\\"].mean()\\navg_oppo_score\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "avg_oppo_score = df_final.groupby(by=[\"name\"])[\"oppo_pre_rating\"].mean()\n",
    "avg_oppo_score"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "434aefc4",
   "metadata": {},
   "source": [
    "### Convert the above output into dataframe and reset the index that can allow us merge the data easier in the future."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "dd2ab0fc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>oppo_pre_rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ADITYA BAJAJ</td>\n",
       "      <td>1563.571429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ALAN BUI</td>\n",
       "      <td>1213.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ALEX KONG</td>\n",
       "      <td>1406.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AMIYATOSH PWNANANDAM</td>\n",
       "      <td>1384.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ANVIT RAO</td>\n",
       "      <td>1554.142857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>TEJAS AYYAGARI</td>\n",
       "      <td>1356.142857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>THOMAS JOSEPH HOSMER</td>\n",
       "      <td>1350.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>TORRANCE HENRY JR</td>\n",
       "      <td>1497.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>VIRAJ MOHILE</td>\n",
       "      <td>1391.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>ZACHARY JAMES HOUGHTON</td>\n",
       "      <td>1483.857143</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>64 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                      name  oppo_pre_rating\n",
       "0            ADITYA BAJAJ       1563.571429\n",
       "1                ALAN BUI       1213.857143\n",
       "2               ALEX KONG       1406.000000\n",
       "3    AMIYATOSH PWNANANDAM       1384.800000\n",
       "4               ANVIT RAO       1554.142857\n",
       "..                     ...              ...\n",
       "59         TEJAS AYYAGARI       1356.142857\n",
       "60    THOMAS JOSEPH HOSMER      1350.200000\n",
       "61       TORRANCE HENRY JR      1497.857143\n",
       "62           VIRAJ MOHILE       1391.000000\n",
       "63  ZACHARY JAMES HOUGHTON      1483.857143\n",
       "\n",
       "[64 rows x 2 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 31;\n",
       "                var nbb_unformatted_code = \"avg_oppo_score = avg_oppo_score.to_frame().reset_index()\\navg_oppo_score\";\n",
       "                var nbb_formatted_code = \"avg_oppo_score = avg_oppo_score.to_frame().reset_index()\\navg_oppo_score\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "avg_oppo_score = avg_oppo_score.to_frame().reset_index()\n",
    "avg_oppo_score"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3a5fb68",
   "metadata": {},
   "source": [
    "### Accurate the average rating result to single digits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "2083fec8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>oppo_pre_rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ADITYA BAJAJ</td>\n",
       "      <td>1564.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ALAN BUI</td>\n",
       "      <td>1214.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ALEX KONG</td>\n",
       "      <td>1406.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AMIYATOSH PWNANANDAM</td>\n",
       "      <td>1385.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ANVIT RAO</td>\n",
       "      <td>1554.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>TEJAS AYYAGARI</td>\n",
       "      <td>1356.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>THOMAS JOSEPH HOSMER</td>\n",
       "      <td>1350.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>TORRANCE HENRY JR</td>\n",
       "      <td>1498.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>VIRAJ MOHILE</td>\n",
       "      <td>1391.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>ZACHARY JAMES HOUGHTON</td>\n",
       "      <td>1484.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>64 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                      name  oppo_pre_rating\n",
       "0            ADITYA BAJAJ            1564.0\n",
       "1                ALAN BUI            1214.0\n",
       "2               ALEX KONG            1406.0\n",
       "3    AMIYATOSH PWNANANDAM            1385.0\n",
       "4               ANVIT RAO            1554.0\n",
       "..                     ...              ...\n",
       "59         TEJAS AYYAGARI            1356.0\n",
       "60    THOMAS JOSEPH HOSMER           1350.0\n",
       "61       TORRANCE HENRY JR           1498.0\n",
       "62           VIRAJ MOHILE            1391.0\n",
       "63  ZACHARY JAMES HOUGHTON           1484.0\n",
       "\n",
       "[64 rows x 2 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 32;\n",
       "                var nbb_unformatted_code = \"avg_oppo_score[\\\"oppo_pre_rating\\\"] = round(avg_oppo_score[\\\"oppo_pre_rating\\\"], 0)\\navg_oppo_score\";\n",
       "                var nbb_formatted_code = \"avg_oppo_score[\\\"oppo_pre_rating\\\"] = round(avg_oppo_score[\\\"oppo_pre_rating\\\"], 0)\\navg_oppo_score\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "avg_oppo_score[\"oppo_pre_rating\"] = round(avg_oppo_score[\"oppo_pre_rating\"], 0)\n",
    "avg_oppo_score"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f4d83e9",
   "metadata": {},
   "source": [
    "### Combine above df with df which contains the player num, name, state etc, to get the final dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "69e87225",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pair_num</th>\n",
       "      <th>name</th>\n",
       "      <th>total points</th>\n",
       "      <th>state</th>\n",
       "      <th>pre rating</th>\n",
       "      <th>oppo_avg_pre_rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>GARY HUA</td>\n",
       "      <td>6.0</td>\n",
       "      <td>ON</td>\n",
       "      <td>1794</td>\n",
       "      <td>1605.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>DAKSHESH DARURI</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1553</td>\n",
       "      <td>1469.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>ADITYA BAJAJ</td>\n",
       "      <td>6.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1384</td>\n",
       "      <td>1564.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>PATRICK H SCHILLING</td>\n",
       "      <td>5.5</td>\n",
       "      <td>MI</td>\n",
       "      <td>1716</td>\n",
       "      <td>1574.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>HANSHI ZUO</td>\n",
       "      <td>5.5</td>\n",
       "      <td>MI</td>\n",
       "      <td>1655</td>\n",
       "      <td>1501.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>60</td>\n",
       "      <td>JULIA SHEN</td>\n",
       "      <td>1.5</td>\n",
       "      <td>MI</td>\n",
       "      <td>967</td>\n",
       "      <td>1330.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>61</td>\n",
       "      <td>JEZZEL FARKAS</td>\n",
       "      <td>1.5</td>\n",
       "      <td>ON</td>\n",
       "      <td>955</td>\n",
       "      <td>1327.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>62</td>\n",
       "      <td>ASHWIN BALAJI</td>\n",
       "      <td>1.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1530</td>\n",
       "      <td>1186.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>63</td>\n",
       "      <td>THOMAS JOSEPH HOSMER</td>\n",
       "      <td>1.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1175</td>\n",
       "      <td>1350.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>64</td>\n",
       "      <td>BEN LI</td>\n",
       "      <td>1.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>1163</td>\n",
       "      <td>1263.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>64 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   pair_num                  name total points state pre rating  \\\n",
       "0         1             GARY HUA           6.0    ON       1794   \n",
       "1         2      DAKSHESH DARURI           6.0    MI       1553   \n",
       "2         3         ADITYA BAJAJ           6.0    MI       1384   \n",
       "3         4   PATRICK H SCHILLING          5.5    MI       1716   \n",
       "4         5           HANSHI ZUO           5.5    MI       1655   \n",
       "..      ...                   ...          ...   ...        ...   \n",
       "59       60           JULIA SHEN           1.5    MI        967   \n",
       "60       61        JEZZEL FARKAS           1.5    ON        955   \n",
       "61       62        ASHWIN BALAJI           1.0    MI       1530   \n",
       "62       63  THOMAS JOSEPH HOSMER          1.0    MI       1175   \n",
       "63       64               BEN LI           1.0    MI       1163   \n",
       "\n",
       "    oppo_avg_pre_rating  \n",
       "0                1605.0  \n",
       "1                1469.0  \n",
       "2                1564.0  \n",
       "3                1574.0  \n",
       "4                1501.0  \n",
       "..                  ...  \n",
       "59               1330.0  \n",
       "60               1327.0  \n",
       "61               1186.0  \n",
       "62               1350.0  \n",
       "63               1263.0  \n",
       "\n",
       "[64 rows x 6 columns]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 33;\n",
       "                var nbb_unformatted_code = \"final_df = pd.merge(df, avg_oppo_score, on=\\\"name\\\")\\nfinal_df = final_df.rename(columns={\\\"oppo_pre_rating\\\": \\\"oppo_avg_pre_rating\\\"})\\nfinal_df\";\n",
       "                var nbb_formatted_code = \"final_df = pd.merge(df, avg_oppo_score, on=\\\"name\\\")\\nfinal_df = final_df.rename(columns={\\\"oppo_pre_rating\\\": \\\"oppo_avg_pre_rating\\\"})\\nfinal_df\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "final_df = pd.merge(df, avg_oppo_score, on=\"name\")\n",
    "final_df = final_df.rename(columns={\"oppo_pre_rating\": \"oppo_avg_pre_rating\"})\n",
    "final_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7fbee117",
   "metadata": {},
   "source": [
    "### Load our output to the local file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "d42c3f6c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "\n",
       "            setTimeout(function() {\n",
       "                var nbb_cell_id = 64;\n",
       "                var nbb_unformatted_code = \"# TO_CSV FILE\\nfinal_df.to_csv(\\n    \\\"/Users/liudengyi/Documents/Analytics Programming/chess_df.csv\\\",\\n    index=False,\\n)\";\n",
       "                var nbb_formatted_code = \"# TO_CSV FILE\\nfinal_df.to_csv(\\n    \\\"/Users/liudengyi/Documents/Analytics Programming/chess_df.csv\\\", index=False,\\n)\";\n",
       "                var nbb_cells = Jupyter.notebook.get_cells();\n",
       "                for (var i = 0; i < nbb_cells.length; ++i) {\n",
       "                    if (nbb_cells[i].input_prompt_number == nbb_cell_id) {\n",
       "                        if (nbb_cells[i].get_text() == nbb_unformatted_code) {\n",
       "                             nbb_cells[i].set_text(nbb_formatted_code);\n",
       "                        }\n",
       "                        break;\n",
       "                    }\n",
       "                }\n",
       "            }, 500);\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# TO_CSV FILE\n",
    "final_df.to_csv(\n",
    "    \"/Users/liudengyi/Documents/Analytics Programming/chess_df.csv\", index=False,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58ffcd4f",
   "metadata": {},
   "source": [
    "---"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
